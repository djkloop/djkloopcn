{"meta":{"title":"djkloop 的技术博客","subtitle":"一无所有，则无所不能！","description":"一无所有，则无所不能！","author":"djkloop","url":"https://djkloop.github.io","root":"/djkloopcn/"},"pages":[{"title":"tags","date":"2020-05-18T04:54:25.000Z","updated":"2020-05-24T04:14:34.644Z","comments":false,"path":"tags/index.html","permalink":"https://djkloop.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-05-18T04:54:32.000Z","updated":"2020-05-24T04:14:34.644Z","comments":false,"path":"categories/index.html","permalink":"https://djkloop.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"2022个人总结","slug":"2022个人总结","date":"2023-01-01T03:39:43.000Z","updated":"2023-01-01T17:44:56.000Z","comments":true,"path":"2023/01/01/2022个人总结/","link":"","permalink":"https://djkloop.github.io/2023/01/01/2022%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/","excerpt":"","text":"0x1. 不知不觉2022结束了，2023已经开启新的征程。想想还是写写自己的个人总结吧~以后可能每年都会写一篇，不为啥，可能就是为了以后回过头来发现自己还能有点回忆吧？ 0x2. 今年经历了5月份北京的疫情，然后从北京辞职回乌鲁木齐工作，又被封三个月…折磨 0x3. 好在回乌鲁木齐还是干着自己喜欢的编程，没错（还是前端开发），2017年毕业在乌鲁木齐搞前端开发，2018年跑到北京继续搞前端开发，没想到在北京磨磨唧唧也干了4年了，前端不说啥牛逼的技术，只能说该摸索的都摸索过了，回到乌鲁木齐发现最大的一个变化就是很多以前的老同事慢慢都升到管理岗了，这可能给我的感触最大，如果我不去北京搞不好我也能混个一官半职哈哈…不过既然选择了出去看看，注定会失去一些东西，我觉得还是值得的（应该说非常值得）。 0x4. 在来说说回来2022年当时准备要干的事情，但是最后搞黄了几件事情。 2021年虚拟货币留下的引子1.1 同事在某虚拟货币交易所上班看他玩eth那些韭菜币，然后当时我入场的时候又赶上了狗子币和柴犬币（2021年可真勾八火，都上新闻了），直接说结果，亏了几千块，赚钱的时候你真的不会跑甚至还想当贪狗（因为当时也好奇玩了合约没错我开了50x当了赌狗虽然很少，但是中间那个过程现在看来就是个赌狗）…然后当时想着为啥不直接搞挖矿呢？每天有稳定收入…还少操心(后面经过我自己血的教训就算挖矿也有一堆p事等着你！场地,多少台机器需要多大的变压器,电费,电价里面的插件计算,网络,机器维护,等等…), 然后入了挖矿这个坑… 挖矿2.1 这个事情是在2021年中的时候搞得，当时火的不行，后面花了点钱自己和几个朋友搞机器（先是买的矿机[ltc]测试后面又加购了显卡机器[eth]），但是没搞多久，因为地方实在不好找，最终收了个本就没弄了，后面想着帮人家老板找场地托管机器挣差价电费，这件事其实后面也挺操蛋的，历程也是一把辛酸泪，过程就不叙述了，最终的结果就是机器托管开了不到2个月，币价闪崩，老板扛不住最终机器停了，最终就没有额外收入了。现在的机器价格也是暴跌…跌的有多夸张呢…我们刚接手老板的机器值220w+(神马的机器懂的都懂已经算保值很不错的了)等到后来币价闪崩之后大概就值个30w左右…不知道那些老板什么心态…要是我我肯定心态炸锅了…不过据我们了解人家老板早把机器的钱赚回来了…这世界还是有钱人多啊…妈的,几百万买机器，我特么别说200w，20w我都没有，好羡慕-, -!2.2 我当时想回新疆的最大一个动机就是因为这件事，因为想着把这个副业搞好+我自己本职的工作+当时想弄一个矿机维修的店大概收入在新疆能到个月25k-30k左右，其实也是蛮ok的，可等我回来的时候已经物是人非了，所以这件事没搞成，也就挺烦心的，以至于后面在乌鲁木齐被封3个月，心情莫名其妙的不爽。2.3 这件事给我最大的总结就是，虚拟货币这个东西真的很虚拟，很多人老跟我掰扯什么虚拟货币的存在意义，挖矿是否犯法乱七八糟的，其实吧我就想说一个，你跟我纠结那么多，只要当时它在灰色的地方，你别搞太大，什么搞那种空气币割韭菜（大概率99%的人没那个技术能力），搞什么巨型矿场（大概率99%的人也没那个资金），大概率没有人鸟你的，因为你扯这么多说白了就一个250/500的变压器的量…我真想不到他拿啥抓你？你每天挖出来的那几个虚拟货币最猛也不过一天0.01个btc嘛…你能靠这点钱上天还是入地？有些人连个挖矿是啥都不知道，就已经给你滔滔不绝的普法教育一顿嘚吧嘚…我真的是…挖矿的人其实比你懂政策懂的多的多，他们手机装的最多的软件就是新闻资讯软件,每天哪哪出了个啥政策,某省份某中央会议出了个啥政策啥新闻，会不会影响他的挖矿，他比你知道的快的多的多…他一个搞挖矿的不懂政策他敢搞吗…所以很多人看新闻如何如何以为立马就会搞到你…其实大部分的情况就是政策有一个延后性它都是慢慢执行的…等执行到你这可能猴年马月了…所以危机中有机遇，机遇中有危机，这话没毛病。但是现在就是不能搞了（政策，币价），所以也没啥好说的了，就算能搞至少要等币价回到开机价。 入职新公司3.1 入职了新公司，与其说是新公司，不如说新瓶装旧酒，因为现在我的同事就是我17年在乌鲁木齐的那波人，当时因为也算是个老卷狗了，也被以前的上司在技术这块的认可，所以回来就随便面试了下走了个过场，直接入职了，虽然是新公司但也都是老朋友其实整个流程还是蛮愉快地，只不过写的业务也是蛮有挑战的。就是写自定表单，低代码拖拖拽拽生成表单。 疫情4.1 刚开始疫情的时候其实蛮ok的，虽然很多事情都不习惯，在乌鲁木齐虽然有很多东西和北京不一样，但是总体生活成本降下来了，而且体验也上去了，举个例子，同样是合租，这边和朋友各花1000块就可以租到一个2居室，但是在北京2000块你也就租个单独的卧室那样吧。还是差的那种（雷布斯口吻），但是也有很多缺点，例如乌鲁木齐的城市规划巨差，很多地方连个小黄车也没有…共享单车在2022年了竟然没有…全靠班车，地铁（就一条，站还不够…）我上班距离我住的地方就2公里，我搭班车还要倒一趟…我服了，要是有个共享单车我直接骑个自行车不香吗…我本人也是很喜欢走路了，但是这条路设计的太差了出门竟然是个高速，我没办法走过去…搞得也就2,3公里的路我愣是除了打车就是坐班车还有就是自己买车…也怪奇葩的，不过这都是小问题，总会解决的~4.2 这段临时插的…其实疫情期间还加了个新的副业…就是短链项目，然后牵扯出来一个卖特产/无货源，但是合作的人实在不“靠谱”，搞卖货电商这块我承认没有一个时间非常严谨的人（需要选品/找货源/谈快递/在哪里开店[淘宝/微信/pdd/咸鱼/jd/跨境]/多平台上架/上架软件的选择/推广/做运营/售后…等等这些都需要有一定能力的人才能来搞…这里面国内的无货源和跨境又有区别…里面涉及的东西又不一样这又是一箩筐的知识）这种事情目前来说根本搞不好…神仙来也没用，至于短链项目我可能暂时也会停掉（只把服务器和网页留着这就行了ctplink），但是我觉得还是个不错的方向，东西已经写出来了就先放那吧…等我有时间了我再改把…失败的原因就是谷歌的广告那个东西我不太懂要想申请到谷歌的广告，还挺费劲的，所以等我抽出来时间再说吧~至于无货源如果没有靠谱的人我暂时不会再搞了。4.3 疫情第二个月的时候情况就不太对了，乌鲁木齐的防疫政策只能说蜜汁…懂的都懂，然后被一只封，心情也是巨差，就在那时候想着反正在家封着也是封着，总得找点事情分散一下状态，当时正好也是看到b站一个分享视频剪辑挣钱的视频（有时候想想感觉就像上天注定一样，你正好想着这事呢，就会顺带推你一把）…刚开始学的时候大概熬了个通宵就把那个视频看完了，然后跑到虎课网把一个视频剪辑的基础课程学完，直接开始撸，现在想想当时怎么就那么亢奋…可能跟我的性格有关，如果我特别想学一个东西的时候我会极度亢奋，会熬个通宵把东西全部学完（能上手的程度），反正那几天有种我刚学编程那感觉了，没日没夜的学啊…感觉自己跟错过了全世界一样怎么不早学哈哈…后面因为有了视频剪辑相关的东西，有了新的目标，慢慢的整个状态就回转过来了，给自己定了个小目标就是2023上半年能达到500粉丝(不好意思失败太多了，不敢定大目标了…)这里面还有碰见一堆烦心事情…就暂时不说了也是跟不“靠谱”的人合作的问题。 少儿编程/技能培训(可能？)5.1 这个也是个能折腾的方向，因为有前置的事情才会干这两件事…目前还在计划阶段，给2023年总结留个引子吧哈哈 0x5. 这大概就是2022年干的事情，其实也没啥，就是定了一个目标，因为种种原因失败了，然后重新找工作，重新制定目标…又失败了，然后继续找目标，然后还在尝试中…2023注定又是个奋斗逼的年份。不过有时候也挺喜欢这种状态的。年轻不奋斗…啥时候奋斗？看着很多人莫名瞎带节奏跟风躺平也怪奇怪的（特指恶意躺平的那种就是游手好闲还想要高工资那种，混吃等死还要升职加薪那种…真好奇你凭什么呢？）…这里在说一点随着时间的推移我选择的副业倾向也是选尽量自己一个人能完成的那种副业了，就包括这个视频剪辑也是前期我也被坑了，但是由于有预期会出现这种状况所以后面没给我造成很大的困扰，选视频剪辑为副业的最大的原因就是害怕合作的人不靠谱然后我自己一个人也能完成（也想证明就算没有别人自己也能干…）。至少目前这个副业选的没啥大问题，出了问题我照样可以剪辑…还怪好的~ 0x6. 展望2023,希望剪辑继续坚持下去,工作继续稳扎稳打,技术这块继续保持广度,不在往深度方向钻研了,然后往副业方向继续研究,为35岁做好退路。2023！向前看。","categories":[{"name":"生活","slug":"生活","permalink":"https://djkloop.github.io/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"杂文","slug":"杂文","permalink":"https://djkloop.github.io/tags/%E6%9D%82%E6%96%87/"}],"author":"djkloop"},{"title":"vue2.7升级记录","slug":"vue2-7升级记录","date":"2022-12-10T01:04:22.000Z","updated":"2022-12-13T14:20:58.000Z","comments":true,"path":"2022/12/10/vue2-7升级记录/","link":"","permalink":"https://djkloop.github.io/2022/12/10/vue2-7%E5%8D%87%E7%BA%A7%E8%AE%B0%E5%BD%95/","excerpt":"","text":"1234567891011121314151617181920212223242526272829// vue-cli4 相关的配置// loader// 有些项目是不需要装的... 装了反而会报错！反正很诡异！npm i -D vue-loader@15.10.0// 保持和vue一致npm i vue-template-compiler@2.7.14 -D// vuenpm i vue@2.7.14// vue-clinpm i @vue/cli-plugin-babel@4 -Dnpm i @vue/cli-plugin-typescript@4 -Dnpm i @vue/cli-service@4 -D// eslintnpm i eslint-plugin-vue@9 -D npm i @vue/eslint-config-typescript@11 -D// tsnpm i -D typescript// volarnpm i -D @volar-plugins/vetur@0.1.0// vscodevuter -&gt; volar 1234567891011121314151617181920212223242526272829// tsconfig.json&#123; \"compilerOptions\": &#123; \"target\": \"esnext\", \"module\": \"esnext\", \"strict\": true, \"jsx\": \"preserve\", \"importHelpers\": true, \"moduleResolution\": \"node\", \"experimentalDecorators\": true, \"skipLibCheck\": true, \"esModuleInterop\": true, \"allowSyntheticDefaultImports\": true, \"sourceMap\": true, \"allowJs\": true, \"baseUrl\": \".\", \"types\": [\"webpack-env\"], \"paths\": &#123; \"@/*\": [\"src/*\"] &#125;, \"lib\": [\"esnext\", \"dom\", \"dom.iterable\", \"scripthost\"] &#125;, \"include\": [\"src/**/*.ts\", \"src/**/*.tsx\", \"src/**/*.vue\", \"tests/**/*.ts\", \"tests/**/*.tsx\"], \"exclude\": [\"node_modules\"], \"vueCompilerOptions\": &#123; \"target\": 2.7, \"extensions\": [\".vue\"] &#125;&#125; Vue常用官网1eslint规则配置: https://eslint.vuejs.org/ 123456789# vue-cli3 -&gt; vue-cli41. npm i @vue/cli-plugin-babel@4 @vue/cli-plugin-eslint@4 @vue/cli-service@4 -D2. npm i core-js@3# 项目有用sass-loader 升级sass-loader3. npm i sass-loader@8 ×","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://djkloop.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://djkloop.github.io/tags/Vue/"},{"name":"Typescript","slug":"Typescript","permalink":"https://djkloop.github.io/tags/Typescript/"}],"author":"djkloop"},{"title":"自媒体到底能不能作为副业","slug":"自媒体到底能不能作为副业","date":"2022-12-03T03:21:56.000Z","updated":"2022-12-03T16:34:13.000Z","comments":true,"path":"2022/12/03/自媒体到底能不能作为副业/","link":"","permalink":"https://djkloop.github.io/2022/12/03/%E8%87%AA%E5%AA%92%E4%BD%93%E5%88%B0%E5%BA%95%E8%83%BD%E4%B8%8D%E8%83%BD%E4%BD%9C%E4%B8%BA%E5%89%AF%E4%B8%9A/","excerpt":"","text":"7月份从北京回新疆了，可以说今年是非常阴间了，先是在北京封了一个月(5月)，然后6月辞职，7月回奎屯，8月回乌鲁木齐入职新公司，8月9号开始封控，11月28号解封…期间因为心情太差，想把代码的事情暂时缓缓，然后就找了个自媒体的事情干，就是剪剪电影之类的。从中吸取的一些反思或者说是对程序员的一种新的理解。 起因为什么要弄自媒体第一想着能不能搞点外快…在一个以前没有机会接触，因为疫情的居家办公的原因，反而给我了个机会，让我从0开始学习…日了狗了。","categories":[{"name":"自媒体","slug":"自媒体","permalink":"https://djkloop.github.io/categories/%E8%87%AA%E5%AA%92%E4%BD%93/"},{"name":"生活","slug":"自媒体/生活","permalink":"https://djkloop.github.io/categories/%E8%87%AA%E5%AA%92%E4%BD%93/%E7%94%9F%E6%B4%BB/"},{"name":"副业","slug":"自媒体/生活/副业","permalink":"https://djkloop.github.io/categories/%E8%87%AA%E5%AA%92%E4%BD%93/%E7%94%9F%E6%B4%BB/%E5%89%AF%E4%B8%9A/"}],"tags":[{"name":"杂文","slug":"杂文","permalink":"https://djkloop.github.io/tags/%E6%9D%82%E6%96%87/"},{"name":"副业","slug":"副业","permalink":"https://djkloop.github.io/tags/%E5%89%AF%E4%B8%9A/"},{"name":"自媒体","slug":"自媒体","permalink":"https://djkloop.github.io/tags/%E8%87%AA%E5%AA%92%E4%BD%93/"}],"author":"djkloop"},{"title":"读《高级趋势技术分析 - 引言》总结","slug":"TheArtOfTrading","date":"2021-09-18T04:42:47.000Z","updated":"2021-09-17T18:00:49.000Z","comments":true,"path":"2021/09/18/TheArtOfTrading/","link":"","permalink":"https://djkloop.github.io/2021/09/18/TheArtOfTrading/","excerpt":"","text":"最近刚入门股票想寻找一些书籍补充一些知识，网上琐碎的视频比较多，也没有系统的观看，索性静下心来看看书，补充补充知识~ 买了一套关于交易的书籍《高级趋势技术分析》等其它三本书，因为也没读后面的。所以书名就不写了，先从引言读起来~我一直认为引言是一本书的总结，讲的这本书的整体思想和架构，所以就先从引言会读起来，在加上这本书的引言洋洋洒洒也写了10-20页左右，所以也就认真的看一下吧~顺带说下我的理财经验，几乎为空白，买这些书纯粹是为了补一下自己那一穷二白的理财观念哈哈~如果有什么问题，可以评论里留言~我加以校正~ 1~10页 k线中去揣摩机构资金的动向和意图 市场其实就是“机构”的集合体，散户只是作为市场上的交易对象的一种补充（这里我觉得也不一定因为这本书的写作时间是2016年了，好比2020年的gme事件我想也会给机构也上了一课，万事不能太绝对） 程序化交易（量化交易？），程序化交易也是按照人脑相同，唯一不同之处在于去掉了更多的情绪化，更加追求数字的完美性。 随着时代的进步，以目前“机构”名词的理解可以视为交易量足以对市场价格行为产生重要影响的各种实体。 在大量交易的时候，不能无缘无故忽视掉每一根k线，作为一个交易者你需要去理解背后的逻辑并且从中找到赚钱的办法，这算是对自己的一种责任，读懂市场语言需要耗费大量的时间和精力，但是这是成为一个交易者最基础的东西。 对于大部分的交易者，最终的目标是找到一种符合自己个性的交易风格和方法，实现交易利润最大化。 书中说了一段挺有意思的话，“我与那些自称是成功交易者的人交谈，但从来没讲过他们的交易记录，我怀疑他们大部分只会讲课，会交易的寥寥可数甚至可能没有。在交易这一行，往往是‘知者不言，言者不知’” 新手很容易迷行各种指标，其实绝大部分指标也是从简单的价格走势衍生出来的。 11~20页","categories":[{"name":"Financial","slug":"Financial","permalink":"https://djkloop.github.io/categories/Financial/"}],"tags":[{"name":"杂文","slug":"杂文","permalink":"https://djkloop.github.io/tags/%E6%9D%82%E6%96%87/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://djkloop.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Financial","slug":"Financial","permalink":"https://djkloop.github.io/tags/Financial/"},{"name":"生活","slug":"生活","permalink":"https://djkloop.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"理财","slug":"理财","permalink":"https://djkloop.github.io/tags/%E7%90%86%E8%B4%A2/"}],"author":"djkloop"},{"title":"Golang channel","slug":"golang-channel","date":"2020-08-26T03:17:17.000Z","updated":"2020-08-26T16:04:02.000Z","comments":true,"path":"2020/08/26/golang-channel/","link":"","permalink":"https://djkloop.github.io/2020/08/26/golang-channel/","excerpt":"","text":"万丈高楼, HelloWorld起 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package mainimport ( \"fmt\" \"time\")func worker(id int, c chan int) &#123; for n := range c &#123; fmt.Printf(\"Worker %d received %d\\n\", id, n) &#125;&#125;func createWorker(id int) chan&lt;- int &#123; c := make(chan int) go worker(id, c) return c&#125;func chanDemo() &#123; var channels [10]chan&lt;- int for i := 0; i &lt; 10; i++ &#123; channels[i] = createWorker(i) &#125; for i := 0; i &lt; 10; i++ &#123; channels[i] &lt;- 'a' + i &#125; for i := 0; i &lt; 10; i++ &#123; channels[i] &lt;- 'A' + i &#125; time.Sleep(time.Millisecond)&#125;func bufferedChannel() &#123; c := make(chan int, 3) go worker(0, c) c &lt;- '1' c &lt;- '2' c &lt;- '3' time.Sleep(time.Millisecond)&#125;func channelClose() &#123; c := make(chan int, 3) go worker(0, c) c &lt;- 1 c &lt;- 2 c &lt;- 3 close(c) time.Sleep(time.Millisecond)&#125;func main() &#123; fmt.Println(\"Channel as first-class citizen\") chanDemo() fmt.Println(\"Buffered channel\") bufferedChannel() fmt.Println(\"Channel close and range\") channelClose()&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package mainimport ( \"fmt\" \"sync\")func doWorker(id int, w worker) &#123; for n := range w.in &#123; fmt.Printf(\"Worker %d received %c\\n\", id, n) w.done() &#125;&#125;type worker struct &#123; in chan int done func()&#125;func createWorker(id int, wg *sync.WaitGroup) worker &#123; w := worker&#123; in: make(chan int), done: func() &#123; wg.Done() &#125;, &#125; go doWorker(id, w) return w&#125;func chanDemo() &#123; var wg sync.WaitGroup var workers [10]worker for i := 0; i &lt; 10; i++ &#123; workers[i] = createWorker(i, &amp;wg) &#125; wg.Add(20) for i, worker := range workers &#123; worker.in &lt;- 'a' + i &#125; for i, worker := range workers &#123; worker.in &lt;- 'A' + i &#125; wg.Wait()&#125;func main() &#123; chanDemo()&#125;","categories":[{"name":"Golang","slug":"Golang","permalink":"https://djkloop.github.io/categories/Golang/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://djkloop.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"author":"djkloop"},{"title":"Golang goroutine","slug":"Golang goroutine","date":"2020-08-26T02:48:13.000Z","updated":"2020-08-26T15:17:14.000Z","comments":true,"path":"2020/08/26/Golang goroutine/","link":"","permalink":"https://djkloop.github.io/2020/08/26/Golang%20goroutine/","excerpt":"","text":"万丈高楼, HelloWorld起 1234567891011121314151617181920package mainimport ( \"fmt\" \"time\")func main() &#123; var a [10]int for i := 0; i &lt; 10; i++ &#123; go func(n int) &#123; for &#123; a[n]++ &#125; &#125;(i) &#125; time.Sleep(time.Millisecond) fmt.Println(a)&#125;","categories":[{"name":"Golang","slug":"Golang","permalink":"https://djkloop.github.io/categories/Golang/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://djkloop.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"author":"djkloop"},{"title":"Golang Struct","slug":"Golang Struct","date":"2020-08-18T04:04:37.000Z","updated":"2020-08-22T07:26:04.000Z","comments":true,"path":"2020/08/18/Golang Struct/","link":"","permalink":"https://djkloop.github.io/2020/08/18/Golang%20Struct/","excerpt":"","text":"万丈高楼, HelloWorld起 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package mainimport ( \"fmt\" \"go_reset/tree\")type myTreeNode struct &#123; *tree.Node&#125;func (myNode *myTreeNode) postOrder() &#123; if myNode == nil || myNode.Node == nil &#123; return &#125; left := myTreeNode&#123;myNode.Left&#125; left.postOrder() right := myTreeNode&#123;myNode.Right&#125; right.postOrder() myNode.Print()&#125;func (myNode *myTreeNode) Traverse() &#123; fmt.Println(\"This method ois shadowed.\")&#125;func main() &#123; root := myTreeNode&#123;&amp;tree.Node&#123;Value: 3&#125;&#125; root.Left = &amp;tree.Node&#123; Value: 3, &#125; root.Right = &amp;tree.Node&#123; Value: 5, &#125; root.Right.Left = new(tree.Node) root.Left.Right = tree.CreateNode(10) root.Left.Right.SetValue(9) fmt.Print(\"In-order traversal: \") root.Traverse() fmt.Print(\"My own post-order traversal: \") root.postOrder()&#125;","categories":[{"name":"Golang","slug":"Golang","permalink":"https://djkloop.github.io/categories/Golang/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://djkloop.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"author":"djkloop"},{"title":"Golang Map","slug":"Golang Map","date":"2020-08-17T03:14:40.000Z","updated":"2020-08-17T16:03:12.000Z","comments":true,"path":"2020/08/17/Golang Map/","link":"","permalink":"https://djkloop.github.io/2020/08/17/Golang%20Map/","excerpt":"","text":"万丈高楼, HelloWorld起 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package mainimport ( \"fmt\")func main() &#123; m := map[string]string&#123; \"name\": \"a\", \"language\": \"golang\", \"site\": \"ok\", \"quality\": \"good\", &#125; m2 := make(map[string]int) var m3 map[string]int fmt.Println(m, m2, m3) /// 不会保证顺序 for k, v := range m &#123; fmt.Println(k, v) &#125; fmt.Println(\"Getting values\") if cName, ok := m[\"name\"]; ok &#123; fmt.Println(cName) &#125; else &#123; fmt.Println(\"not error key\") &#125; if notName, ok := m[\"fu\"]; ok &#123; fmt.Println(notName) &#125; else &#123; fmt.Println(\"key dose not exist\") &#125; fmt.Println(\"Deleting values\") delete(m, \"name\") name, ok := m[\"name\"] fmt.Println(name, ok)&#125; 123456789101112131415161718192021222324252627282930313233package mainimport ( \"fmt\")func lengthOfNonRepeatingSubStr(s string) int &#123; lastOccurred := make(map[rune]int) start := 0 maxLength := 0 for i, ch := range []rune(s) &#123; if lastI, ok := lastOccurred[ch]; ok &amp;&amp; lastOccurred[ch] &gt;= start &#123; start = lastI + 1 &#125; if i-start+1 &gt; maxLength &#123; maxLength = i - start + 1 &#125; lastOccurred[ch] = i &#125; return maxLength&#125;func main() &#123; fmt.Println(lengthOfNonRepeatingSubStr(\"111222333\")) fmt.Println(lengthOfNonRepeatingSubStr(\"abcabcaa\")) fmt.Println(lengthOfNonRepeatingSubStr(\"bbbbbbbb\")) fmt.Println(lengthOfNonRepeatingSubStr(\"pwwkewa\")) fmt.Println(lengthOfNonRepeatingSubStr(\"对啊对啊\"))&#125; 123456789101112131415161718192021222324252627282930313233package mainimport ( \"fmt\" \"unicode/utf8\")func main() &#123; s := \"你说的对!\" // UTF-8 for _, b := range []byte(s) &#123; fmt.Printf(\"%X \", b) &#125; fmt.Println() for i, ch := range s &#123; fmt.Printf(\"(%d %X)\", i, ch) &#125; fmt.Println() fmt.Println(\"Run Count: \", utf8.RuneCountInString(s)) bytes := []byte(s) for len(bytes) &gt; 0 &#123; ch, size := utf8.DecodeRune(bytes) bytes = bytes[size:] fmt.Printf(\"%c \", ch) &#125; fmt.Println() for i, ch := range []rune(s) &#123; fmt.Printf(\"(%d %c) \", i, ch) &#125; fmt.Println()&#125;","categories":[{"name":"Golang","slug":"Golang","permalink":"https://djkloop.github.io/categories/Golang/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://djkloop.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"author":"djkloop"},{"title":"Golang Slice","slug":"Golang Slice","date":"2020-08-14T03:43:08.000Z","updated":"2020-08-17T15:13:16.000Z","comments":true,"path":"2020/08/14/Golang Slice/","link":"","permalink":"https://djkloop.github.io/2020/08/14/Golang%20Slice/","excerpt":"","text":"万丈高楼, HelloWorld起 123456789101112131415161718192021222324252627282930313233343536package mainimport ( \"fmt\")func updateSlice(s []int) &#123; s[0] = 100&#125;func main() &#123; arr := [...]int&#123;0, 1, 2, 3, 4, 5, 6, 7&#125; fmt.Println(\"arr[2:6]\", arr[2:6]) fmt.Println(\"arr[:6]\", arr[:6]) s1 := arr[2:] fmt.Println(\"s1 = \", s1) s2 := arr[:] fmt.Println(\"s2 = \", s2) fmt.Println(\"After updateSlice(s1)\") updateSlice(s1) fmt.Println(s1) fmt.Println(arr) fmt.Println(\"After updateSlice(s2)\") updateSlice(s2) fmt.Println(s2) fmt.Println(arr) fmt.Println(\"Reslice\") fmt.Println(s2) s2 = s2[:5] fmt.Println(s2) s2 = s2[2:] fmt.Println(s2)&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package mainimport ( \"fmt\")func printSlice(s []int) &#123; fmt.Printf(\"%v, len=%d, cap=%d\\n\", s, len(s), cap(s))&#125;func main() &#123; // 会有默认值 var s []int for i := 0; i &lt; 20; i++ &#123; printSlice(s) s = append(s, 2*i+1) &#125; fmt.Println(s) s1 := []int&#123;2, 4, 6, 8&#125; printSlice(s1) s2 := make([]int, 16) s3 := make([]int, 10, 32) printSlice(s2) printSlice(s3) fmt.Println(\"Coping slice\") copy(s2, s1) fmt.Println(s2) fmt.Println(\"Deleting elements from slice\") s2 = append(s2[:3], s2[4:]...) printSlice(s2) fmt.Println(\"Popping from front slice\") front := s2[0] s2 = s2[1:] fmt.Println(front) printSlice(s2) fmt.Println(\"Popping from back slice\") tail := s2[len(s2)-1] s2 = s2[:len(s2)-1] fmt.Println(tail) printSlice(s2)&#125;","categories":[{"name":"Golang","slug":"Golang","permalink":"https://djkloop.github.io/categories/Golang/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://djkloop.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"author":"djkloop"},{"title":"终端命令","slug":"Linux","date":"2020-07-18T08:07:21.000Z","updated":"2020-07-18T08:07:21.000Z","comments":true,"path":"2020/07/18/Linux/","link":"","permalink":"https://djkloop.github.io/2020/07/18/Linux/","excerpt":"","text":"Bash-OnelinerI am glad that you are here! I was working on bioinformatics a few years ago and was amazed by those single-word bash commands which are much faster than my dull scripts, time saved through learning command-line shortcuts and scripting. Recent years I am working on cloud computing and I keep recording those useful commands here. Not all of them is oneliner, but i put effort on making them brief and swift. I am mainly using Ubuntu, RedHat and Linux Mint, Mac and CentOS, sorry if the commands don’t work on your system. This blog will focus on simple bash commands for parsing data and Linux system maintenance that i acquired from work and LPIC exam. I apologize that there are no detailed citation for all the commands, but they are probably from dear Google and Stackoverflow. English and bash are not my first language, please correct me anytime, thank you.If you know other cool commands, please teach me! Here’s a more stylish version of Bash-Oneliner~ Handy Bash one-liners Terminal Tricks Variable Grep Sed Awk Xargs Find Condition and Loop Math Time Download Random Xwindow System Hardware Networking Data Wrangling Others Terminal TricksUsing Ctrl keys12345678910111213141516Ctrl + n : same as Down arrow.Ctrl + p : same as Up arrow.Ctrl + r : begins a backward search through command history.(keep pressing Ctrl + r to move backward)Ctrl + s : to stop output to terminal.Ctrl + q : to resume output to terminal after Ctrl + s.Ctrl + a : move to the beginning of line.Ctrl + e : move to the end of line.Ctrl + d : if you've type something, Ctrl + d deletes the character under the cursor, else, it escapes the current shell.Ctrl + k : delete all text from the cursor to the end of line.Ctrl + x + backspace : delete all text from the beginning of line to the cursor.Ctrl + t : transpose the character before the cursor with the one under the cursor, press Esc + t to transposes the two words before the cursor.Ctrl + w : cut the word before the cursor; then Ctrl + y paste itCtrl + u : cut the line before the cursor; then Ctrl + y paste itCtrl + _ : undo typing.Ctrl + l : equivalent to clear.Ctrl + x + Ctrl + e : launch editor defined by $EDITOR to input your command. Useful for multi-line commands. Change case123456Esc + u# converts text from cursor to the end of the word to uppercase.Esc + l# converts text from cursor to the end of the word to lowercase.Esc + c# converts letter under the cursor to uppercase. Run history number (e.g. 53)1!53 Run last command1234!!# run the previous command using sudosudo !!# of course you need to enter your password Run last command and change some parameter using caret substitution (e.g. last command: echo ‘aaa’ -&gt; rerun as: echo ‘bbb’)12345678910#last command: echo 'aaa'^aaa^bbb#echo 'bbb'#bbb#Notice that only the first aaa will be replaced, if you want to replace all 'aaa', use ':&amp;' to repeat it:^aaa^bbb^:&amp;#or!!:gs/aaa/bbb/ Run past command that began with (e.g. cat filename)1234!cat# or!c# run cat filename again Bash globbing1234567891011# '*' serves as a \"wild card\" for filename expansion./b?n/?at #/bin/cat# '?' serves as a single-character \"wild card\" for filename expansion./etc/pa*wd #/etc/passwd# ‘[]’ serves to match the character from a range.ls -l [a-z]* #list all files with alphabet in its filename.# ‘&#123;&#125;’ can be used to match filenames with more than one patternsls &#123;*.sh,*.py&#125; #list all .sh and .py files Some handy environment variables12345678910111213141516$0 :name of shell or shell script.$1, $2, $3, ... :positional parameters.$# :number of positional parameters.$? :most recent foreground pipeline exit status.$- :current options set for the shell.$$ :pid of the current shell (not subshell).$! :is the PID of the most recent background command.$DESKTOP_SESSION current display manager$EDITOR preferred text editor.$LANG current language.$PATH list of directories to search for executable files (i.e. ready-to-run programs)$PWD current directory$SHELL current shell$USER current username$HOSTNAME current hostname Grep[back to top] Type of grep12345grep = grep -G # Basic Regular Expression (BRE)fgrep = grep -F # fixed text, ignoring meta-charachetrsegrep = grep -E # Extended Regular Expression (ERE)pgrep = grep -P # Perl Compatible Regular Expressions (PCRE)rgrep = grep -r # recursive Grep and count number of empty lines1grep -c \"^$\" Grep and return only integer123grep -o '[0-9]*'#orgrep -oP '\\d' Grep integer with certain number of digits (e.g. 3)12345grep ‘[0-9]\\&#123;3\\&#125;’# orgrep -E ‘[0-9]&#123;3&#125;’# orgrep -P ‘\\d&#123;3&#125;’ Grep only IP address123grep -Eo '[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;'# orgrep -Po '\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;' Grep whole word (e.g. ‘target’)1234grep -w 'target'#or using REgrep '\\btarget\\b' Grep returning lines before and after match (e.g. ‘bbo’)12345678# return also 3 lines after matchgrep -A 3 'bbo'# return also 3 lines before matchgrep -B 3 'bbo'# return also 3 lines before and after matchgrep -C 3 'bbo' Grep string starting with (e.g. ‘S’)1grep -o 'S.*' Extract text between words (e.g. w1,w2)1grep -o -P '(?&lt;=w1).*(?=w2)' Grep lines without word (e.g. ‘bbo’)1grep -v bbo filename Grep lines not begin with string (e.g. #)1grep -v '^#' file.txt Grep variables with space within it (e.g. myvar=”some strings”)12grep \"$myvar\" filename#remember to quote the variable! Grep only one/first match (e.g. ‘bbo’)1grep -m 1 bbo filename Grep and return number of matching line(e.g. ‘bbo’)1grep -c bbo filename Count occurrence (e.g. three times a line count three times)1grep -o bbo filename |wc -l Case insensitive grep (e.g. ‘bbo’/‘BBO’/‘Bbo’)1grep -i \"bbo\" filename COLOR the match (e.g. ‘bbo’)!1grep --color bbo filename Grep search all files in a directory(e.g. ‘bbo’)123grep -R bbo /path/to/directory# orgrep -r bbo /path/to/directory Search all files in directory, do not ouput the filenames (e.g. ‘bbo’)1grep -rh bbo /path/to/directory Search all files in directory, output ONLY the filenames with matches(e.g. ‘bbo’)1grep -rl bbo /path/to/directory Grep OR (e.g. A or B or C or D)1grep 'A\\|B\\|C\\|D' Grep AND (e.g. A and B)1grep 'A.*B' Regex any singer character (e.g. ACB or AEB)1grep 'A.B' Regex with or without a certain character (e.g. color or colour)1grep ‘colou?r’ Grep all content of a fileA from fileB1grep -f fileA fileB Grep a tab1grep $'\\t' Grep variable from variable1234$echo \"$long_str\"|grep -q \"$short_str\"if [ $? -eq 0 ]; then echo 'found'; fi#grep -q will output 0 if match found#remember to add space between []! Grep strings between a bracket()1grep -oP '\\(\\K[^\\)]+' Grep number of characters with known strings in between(e.g. AAEL000001-RA)12grep -o -w \"\\w\\&#123;10\\&#125;\\-R\\w\\&#123;1\\&#125;\"# \\w word character [0-9a-zA-Z_] \\W not word character Skip directory (e.g. ‘bbo’)1grep -d skip 'bbo' /path/to/files/* Sed[back to top] Remove the 1st line1sed 1d filename Remove the first 100 lines (remove line 1-100)1sed 1,100d filename Remove lines with string (e.g. ‘bbo’)123sed \"/bbo/d\" filename- case insensitive:sed \"/bbo/Id\" filename Remove lines whose nth character not equal to a value (e.g. 5th character not equal to 2)123sed -E '/^.&#123;5&#125;[^2]/d'#aaaa2aaa (you can stay)#aaaa1aaa (delete!) Edit infile (edit and save to file), (e.g. deleting the lines with ‘bbo’ and save to file)1sed -i \"/bbo/d\" filename When using variable (e.g. $i), use double quotes “ “1234# e.g. add &gt;$i to the first line (to make a bioinformatics FASTA file)sed \"1i &gt;$i\"# notice the double quotes! in other examples, you can use a single quote, but here, no way!# '1i' means insert to first line Using environment variable and end-of-line pattern at the same time.12# Use backslash for end-of-line $ pattern, and double quotes for expressing the variablesed -e \"\\$s/\\$/\\n+--$3-----+/\" Delete/remove empty lines12345sed '/^\\s*$/d'# orsed '/^$/d' Delete/remove last line1sed '$d' Delete/remove last character from end of file1sed -i '$ s/.$//' filename Add string to beginning of file (e.g. “[“)1sed -i '1s/^/[/' file Add string at certain line number (e.g. add ‘something’ to line 1 and line 3)1sed -e '1isomething -e '3isomething' Add string to end of file (e.g. “]”)1sed '$s/$/]/' filename Add newline to the end1sed '$a\\' Add string to beginning of every line (e.g. ‘bbo’)1sed -e 's/^/bbo/' file Add string to end of each line (e.g. “}”)1sed -e 's/$/\\&#125;\\]/' filename Add \\n every nth character (e.g. every 4th character)1sed 's/.\\&#123;4\\&#125;/&amp;\\n/g' Concatenate/combine/join files with a seperator and next line (e.g separate by “,”)1sed -s '$a,' *.json &gt; all.json Substitution (e.g. replace A by B)1sed 's/A/B/g' filename Substitution with wildcard (e.g. replace a line start with aaa= by aaa=/my/new/path)1sed \"s/aaa=.*/aaa=\\/my\\/new\\/path/g\" Select lines start with string (e.g. ‘bbo’)1sed -n '/^@S/p' Delete lines with string (e.g. ‘bbo’)1sed '/bbo/d' filename Print/get/trim a range of line (e.g. line 500-5000)1sed -n 500,5000p filename Print every nth lines123sed -n '0~3p' filename# catch 0: start; 3: step Print every odd # lines1sed -n '1~2p' Print every third line including the first line1sed -n '1p;0~3p' Remove leading whitespace and tabs12sed -e 's/^[ \\t]*//'# Notice a whitespace before '\\t'!! Remove only leading whitespace123sed 's/ *//'# notice a whitespace before '*'!! Remove ending commas1sed 's/,$//g' Add a column to the end12345sed \"s/$/\\t$i/\"# $i is the valuable you want to add# To add the filename to every last column of the filefor i in $(ls);do sed -i \"s/$/\\t$i/\" $i;done Add extension of filename to last column1for i in T000086_1.02.n T000086_1.02.p;do sed \"s/$/\\t$&#123;i/*./&#125;/\" $i;done &gt;T000086_1.02.np Remove newline\\ nextline1sed ':a;N;$!ba;s/\\n//g' Print a particular line (e.g. 123th line)1sed -n -e '123p' Print a number of lines (e.g. line 10th to line 33 rd)1sed -n '10,33p' &lt;filename Change delimiter1sed 's=/=\\\\/=g' Replace with wildcard (e.g A-1-e or A-2-e or A-3-e….)1sed 's/A-.*-e//g' filename Remove last character of file1sed '$ s/.$//' Insert character at specified position of file (e.g. AAAAAA –&gt; AAA#AAA)1sed -r -e 's/^.&#123;3&#125;/&amp;#/' file Awk[back to top] Set tab as field separator1awk -F $'\\t' Output as tab separated (also as field separator)1awk -v OFS='\\t' Pass variable12a=bbo;b=obb;awk -v a=\"$a\" -v b=\"$b\" \"$1==a &amp;&amp; $10=b\" filename Print line number and number of characters on each line1awk '&#123;print NR,length($0);&#125;' filename Find number of columns1awk '&#123;print NF&#125;' Reverse column order1awk '&#123;print $2, $1&#125;' Check if there is a comma in a column (e.g. column $1)1awk '$1~/,/ &#123;print&#125;' Split and do for loop1awk '&#123;split($2, a,\",\");for (i in a) print $1\"\\t\"a[i]&#125;' filename Print all lines before nth occurrence of a string (e.g stop print lines when ‘bbo’ appears 7 times)1awk -v N=7 '&#123;print&#125;/bbo/&amp;&amp; --N&lt;=0 &#123;exit&#125;' Print filename and last line of all files in directory1ls|xargs -n1 -I file awk '&#123;s=$0&#125;;END&#123;print FILENAME,s&#125;' file Add string to the beginning of a column (e.g add “chr” to column $3)1awk 'BEGIN&#123;OFS=\"\\t\"&#125;$3=\"chr\"$3' Remove lines with string (e.g. ‘bbo’)1awk '!/bbo/' file Remove last column1awk 'NF&#123;NF-=1&#125;;1' file Usage and meaning of NR and FNR1234567891011121314# For example there are two files:# fileA:# a# b# c# fileB:# d# eawk 'print FILENAME, NR,FNR,$0&#125;' fileA fileB# fileA 1 1 a# fileA 2 2 b# fileA 3 3 c# fileB 4 1 d# fileB 5 2 e AND gate1234567891011121314151617# For example there are two files:# fileA:# 1 0# 2 1# 3 1# 4 0# fileB:# 1 0# 2 1# 3 0# 4 1awk -v OFS='\\t' 'NR=FNR&#123;a[$1]=$2;next&#125; NF &#123;print $1,((a[$1]=$2)? $2:\"0\")&#125;' fileA fileB# 1 0# 2 1# 3 0# 4 0 Round all numbers of file (e.g. 2 significant figure)123456awk '&#123;while (match($0, /[0-9]+\\[0-9]+/))&#123; \\printf \"%s%.2f\", substr($0,0,RSTART-1),substr($0,RSTART,RLENGTH) \\$0=substr($0, RSTART+RLENGTH) \\&#125; \\print \\&#125;' Give number/index to every row1awk '&#123;printf(\"%s\\t%s\\n\",NR,$0)&#125;' Break combine column data into rows123456789# For example, seperate the following content:# David cat,dog# into# David cat# David dogawk '&#123;split($2,a,\",\");for(i in a)print $1\"\\t\"a[i]&#125;' file# Detail here: http://stackoverflow.com/questions/33408762/bash-turning-single-comma-separated-column-into-multi-line-string Average a file (each line in file contains only one number)1awk '&#123;s+=$1&#125;END&#123;print s/NR&#125;' Print field start with string (e.g Linux)1awk '$1 ~ /^Linux/' Sort a row (e.g. 1 40 35 12 23 –&gt; 1 12 23 35 40)1awk ' &#123;split( $0, a, \"\\t\" ); asort( a ); for( i = 1; i &lt;= length(a); i++ ) printf( \"%s\\t\", a[i] ); printf( \"\\n\" ); &#125;' Subtract previous row values (add column6 which equal to column4 minus last column5)1awk '&#123;$6 = $4 - prev5; prev5 = $5; print;&#125;' Xargs[back to top] Set tab as delimiter (default:space)1xargs -d\\t Display 3 items per line123echo 1 2 3 4 5 6| xargs -n 3# 1 2 3# 4 5 6 Prompt before execution1echo a b c |xargs -p -n 3 Print command along with output123xargs -t abcd# bin/echo abcd# abcd With find and rm1234find . -name \"*.html\"|xargs rm# when using a backtickrm `find . -name \"*.html\"` Delete files with whitespace in filename (e.g. “hello 2001”)1find . -name \"*.c\" -print0|xargs -0 rm -rf Show limits on command-line length12345678xargs --show-limits# Output from my Ubuntu:# Your environment variables take up 3653 bytes# POSIX upper limit on argument length (this system): 2091451# POSIX smallest allowable upper limit on argument length (all systems): 4096# Maximum length of command we could actually use: 2087798# Size of command buffer we are actually using: 131072# Maximum parallelism (--max-procs must be no greater): 2147483647 Move files to folder1234find . -name \"*.bak\" -print 0|xargs -0 -I &#123;&#125; mv &#123;&#125; ~/old# orfind . -name \"*.bak\" -print 0|xargs -0 -I file mv file ~/old Move first 100th files to a directory (e.g. d1)1ls |head -100|xargs -I &#123;&#125; mv &#123;&#125; d1 Parallel1234time echo &#123;1..5&#125; |xargs -n 1 -P 5 sleep# a lot faster than:time echo &#123;1..5&#125; |xargs -n1 sleep Copy all files from A to B1234find /dir/to/A -type f -name \"*.py\" -print 0| xargs -0 -r -I file cp -v -p file --target-directory=/path/to/B# v: verbose|# p: keep detail (e.g. owner) With sed1ls |xargs -n1 -I file sed -i '/^Pos/d' filename Add the file name to the first line of file1ls |sed 's/.txt//g'|xargs -n1 -I file sed -i -e '1 i\\&gt;file\\' file.txt Count all files1ls |xargs -n1 wc -l Turn output into a single line1ls -l| xargs Count files within directories12echo mso&#123;1..8&#125;|xargs -n1 bash -c 'echo -n \"$1:\"; ls -la \"$1\"| grep -w 74 |wc -l' --# \"--\" signals the end of options and display further option processing Count lines in all file, also count total lines1ls|xargs wc -l Xargs and grep1cat grep_list |xargs -I&#123;&#125; grep &#123;&#125; filename Xargs and sed (replace all old ip address with new ip address under /etc directory)1grep -rl '192.168.1.111' /etc | xargs sed -i 's/192.168.1.111/192.168.2.111/g' Find[back to top] List all sub directory/file in the current directory1find . List all files under the current directory1find . -type f List all directories under the current directory1find . -type d Edit all files under current directory (e.g. replace ‘www’ with ‘ww’)12345find . -name '*.php' -exec sed -i 's/www/w/g' &#123;&#125; \\;# if there are no subdirectoryreplace \"www\" \"w\" -- *# a space before * Find and output only filename (e.g. “mso”)1find mso*/ -name M* -printf \"%f\\n\" Find and delete file with size less than (e.g. 74 byte)123find . -name \"*.mso\" -size -74c -delete# M for MB, etc Condition and loop[back to top] If statement12345678910111213141516171819202122232425262728293031323334353637383940# if and else loop for string matchingif [[ \"$c\" == \"read\" ]]; then outputdir=\"seq\"; else outputdir=\"write\" ; fi# Test if myfile contains the string 'test':if grep -q hello myfile; then …# Test if mydir is a directory, change to it and do other stuff:if cd mydir; then echo 'some content' &gt;myfileelse echo &gt;&amp;2 \"Fatal error. This script requires mydir.\"fi# if variable is nullif [ ! -s \"myvariable\" ]#True of the length if \"STRING\" is zero.# Test if file existif [ -e 'filename' ]then echo -e \"file exists!\"fi# Test if file exist but also including symbolic links:if [ -e myfile ] || [ -L myfile ]then echo -e \"file exists!\"fi# Test if the value of x is greater or equal than 5if [ \"$x\" -ge 5 ]; then …# Test if the value of x is greater or equal than 5, in bash/ksh/zsh:if ((x &gt;= 5)); then …# Use (( )) for arithmetic operationif ((j==u+2))# Use [[ ]] for comparisonif [[ $age -gt 21 ]] More if commands For loop12345678910111213141516for i in $(ls); do echo file $i;done#orfor i in *; do echo file $i; done# Press any key to continue each loopfor i in $(cat tpc_stats_0925.log |grep failed|grep -o '\\query\\w\\&#123;1,2\\&#125;');do cat $&#123;i&#125;.log; read -rsp $'Press any key to continue...\\n' -n1 key;done# Print a file line by line when a key is pressed,oifs=\"$IFS\"; IFS=$'\\n'; for line in $(cat myfile); do ...; donewhile read -r line; do ...; done &lt;myfile#If only one word a line, simplyfor line in $(cat myfile); do echo $line; read -n1; done#Loop through an arrayfor i in \"$&#123;arrayName[@]&#125;\"; do echo $i;done While loop,123456789# Column subtraction of a file (e.g. a 3 columns file)while read a b c; do echo $(($c-$b));done &lt; &lt;(head filename)#there is a space between the two '&lt;'s# Sum up column subtractioni=0; while read a b c; do ((i+=$c-$b)); echo $i; done &lt; &lt;(head filename)# Keep checking a running process (e.g. perl) and start another new process (e.g. python) immediately after it. (BETTER use the wait command! Ctrl+F 'wait')while [[ $(pidof perl) ]];do echo f;sleep 10;done &amp;&amp; python timetorunpython.py switch (case in bash)123456789101112read type;case $type in '0') echo 'how' ;; '1') echo 'are' ;; '2') echo 'you' ;;esac Variable[back to top] Variable substitution within quotes1234# foo=bar echo \"'$foo'\"#'bar'# double/single quotes around single quotes make the inner single quotes expand variables Get the length of variable123var=\"some string\"echo $&#123;#var&#125;# 11 Get the first character of the variable123456var=stringecho \"$&#123;var:0:1&#125;\"#s# orecho $&#123;var%%\"$&#123;var#?&#125;\"&#125; Remove the first or last string from variable123var=\"some string\"echo $&#123;var:2&#125;#me string Replacement (e.g. remove the first leading 0 )123var=\"0050\"echo $&#123;var[@]#0&#125;#050 Replacement (e.g. replace ‘a’ with ‘,’)1&#123;var/a/,&#125; Replace all (e.g. replace all ‘a’ with ‘,’)1&#123;var//a/,&#125; 1234#with grep test=\"god the father\" grep $&#123;test// /\\\\\\|&#125; file.txt # turning the space into 'or' (\\|) in grep To change the case of the string stored in the variable to lowercase (Parameter Expansion)123var=HelloWorldecho $&#123;var,,&#125;helloworld Expand and then execute variable/argument123cmd=\"bar=foo\"eval \"$cmd\"echo \"$bar\" # foo Math[back to top] Arithmetic Expansion in Bash (Operators: +, -, *, /, %, etc)1234567891011echo $(( 10 + 5 )) #15x=1echo $(( x++ )) #1 , notice that it is still 1, since it's post-incremenecho $(( x++ )) #2echo $(( ++x )) #4 , notice that it is not 3 since it's pre-incremenecho $(( x-- )) #4echo $(( x-- )) #3echo $(( --x )) #1x=2y=3echo $(( x ** y )) #8 Print out the prime factors of a number (e.g. 50)12factor 50# 50: 2 5 5 Sum up input list (e.g. seq 10)1seq 10|paste -sd+|bc Sum up a file (each line in file contains only one number)1awk '&#123;s+=$1&#125; END &#123;print s&#125;' filename Column subtraction1cat file| awk -F '\\t' 'BEGIN &#123;SUM=0&#125;&#123;SUM+=$3-$2&#125;END&#123;print SUM&#125;' Simple math with expr123expr 10+20 #30expr 10\\*20 #600expr 30 \\&gt; 20 #1 (true) More math with bc1234567891011# Number of decimal digit/ significant figureecho \"scale=2;2/3\" | bc#.66# Exponent operatorecho \"10^2\" | bc#100# Using variablesecho \"var=5;--var\"| bc#4 Time[back to top] Find out the time require for executing a command1time echo hi Wait for some time (e.g 10s)1234sleep 10# wait for random duration (e.g. sleep 1-5 second, like adding a jitter)sleep $[ ( $RANDOM % 5 ) + 1 ] Log out your account after a certain period of time (e.g 10 seconds)12TMOUT=10#once you set this variable, logout timer start running! Set how long you want to run a command12#This will run the command 'sleep 10' for only 1 second.timeout 1 sleep 10 Set when you want to run a command (e.g 1 min from now)12345at now + 1min #time-units can be minutes, hours, days, or weekswarning: commands will be executed using /bin/shat&gt; echo hihigithub &gt;~/itworksat&gt; &lt;EOT&gt; # press Ctrl + D to exitjob 1 at Wed Apr 18 11:16:00 2018 Download[back to top] Download the content of this README.md (the one your are viewing now)12345678910curl https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/README.md | pandoc -f markdown -t man | man -l -# or w3m (a text based web browser and pager)curl https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/README.md | pandoc | w3m -T text/html# or using emacs (in emac text editor)emacs --eval '(org-mode)' --insert &lt;(curl https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/README.md | pandoc -t org)# or using emacs (on terminal, exit using Ctrl + x then Ctrl + c)emacs -nw --eval '(org-mode)' --insert &lt;(curl https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/README.md | pandoc -t org) Download all from a page1234567891011wget -r -l1 -H -t1 -nd -N -np -A mp3 -e robots=off http://example.com# -r: recursive and download all links on page# -l1: only one level link# -H: span host, visit other hosts# -t1: numbers of retries# -nd: don't make new directories, download to here# -N: turn on timestamp# -nd: no parent# -A: type (separate by ,)# -e robots=off: ignore the robots.txt file which stop wget from crashing the site, sorry example.com Upload a file to web and download (https://transfer.sh/)123456# Upload a file (e.g. filename.txt):curl --upload-file ./filename.txt https://transfer.sh/filename.txt# the above command will return a URL, e.g: https://transfer.sh/tG8rM/filename.txt# Next you can download it by:curl https://transfer.sh/tG8rM/filename.txt -o filename.txt Download file if necessary123456data=file.txturl=http://www.example.com/$dataif [ ! -s $data ];then echo \"downloading test data...\" wget $urlfi Wget to a filename (when a long name)1wget -O filename \"http://example.com\" Wget files to a folder1wget -P /path/to/directory \"http://example.com\" Instruct curl to follow any redirect until it reaches the final destination:1curl -L google.com Random[back to top] Random generate password (e.g. generate 5 password each of length 13)123sudo apt install pwgenpwgen 13 5#sahcahS9dah4a xieXaiJaey7xa UuMeo0ma7eic9 Ahpah9see3zai acerae7Huigh7 Random pick 100 lines from a file1shuf -n 100 filename Random order (lucky draw)1for i in a b c d e; do echo $i; done| shuf Echo series of random numbers between a range (e.g. shuffle numbers from 0-100, then pick 15 of them randomly)1shuf -i 0-100 -n 15 Echo a random number1echo $RANDOM Random from 0-91echo $((RANDOM % 10)) Random from 1-101echo $(((RANDOM %10)+1)) Xwindow[back to top] X11 GUI applications! Here are some GUI tools for you if you get bored by the text-only environment. Enable X11 forwarding,in order to use graphical application on servers1234567ssh -X user_name@ip_address# or setting through xhost# --&gt; Install the following for Centos:# xorg-x11-xauth# xorg-x11-fonts-*# xorg-x11-utils Little xwindow tools123xclockxeyesxcowsay Open pictures/images from ssh server1231. ssh -X user_name@ip_address2. apt-get install eog3. eog picture.png Watch videos on server1231. ssh -X user_name@ip_address2. sudo apt install mpv3. mpv myvideo.mp4 Use gedit on server (GUI editor)1231. ssh -X user_name@ip_address2. apt-get install gedit3. gedit filename.txt Open PDF file from ssh server1231. ssh -X user_name@ip_address2. apt-get install evince3. evince filename.pdf Use google-chrome browser from ssh server1234561. ssh -X user_name@ip_address2. apt-get install libxss1 libappindicator1 libindicator73. wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb4. sudo apt-get install -f5. dpkg -i google-chrome*.deb6. google-chrome System[back to top] Audit files to see who made changes to a file [RedHat based system only]123456# To audit a directory recursively for changes (e.g. myproject)auditctl -w /path/to/myproject/ -p wa# If you delete a file name \"VIPfile\", the deletion is recorded in /var/log/audit/audit.logsudo grep VIPfile /var/log/audit/audit.log#type=PATH msg=audit(1581417313.678:113): item=1 name=\"VIPfile\" inode=300115 dev=ca:01 mode=0100664 ouid=1000 ogid=1000 rdev=00:00 nametype=DELETE cap_fp=0000000000000000 cap_fi=0000000000000000 cap_fe=0 cap_fver=0 Check out whether SELinux is enabled12345678910sestatus# SELinux status: enabled# SELinuxfs mount: /sys/fs/selinux# SELinux root directory: /etc/selinux# Loaded policy name: targeted# Current mode: enforcing# Mode from config file: enforcing# Policy MLS status: enabled# Policy deny_unknown status: allowed# Max kernel policy version: 31 Generate public key from private key1ssh-keygen -y -f ~/.ssh/id_rsa &gt; ~/.ssh/id_rsa.pub Copy your default public key to remote user123ssh-copy-id &lt;user_name&gt;@&lt;server_IP&gt;# then you need to enter the password# and next time you won't need to enter password when ssh to that user Copy default public key to remote user using the required private key (e.g. use your mykey.pem key to copy your id_rsa.pub to the remote user)123# before you need to use mykey.pem to ssh to remote user.ssh-copy-id -i ~/.ssh/id_rsa.pub -o \"IdentityFile ~/Downloads/mykey.pem\" &lt;user_name&gt;@&lt;server_IP&gt;# now you don't need to use key to ssh to that user. SSH Agent Forwarding123456# To bring your key with you when ssh to serverA, then ssh to serverB from serverA using the key.ssh-agentssh-add /path/to/mykey.pemssh -A &lt;username&gt;@&lt;IP_of_serverA&gt;# Next you can ssh to serverBssh &lt;username&gt;@&lt;IP_of_serverB&gt; Follow the most recent logs from service1journalctl -u &lt;service_name&gt; -f Eliminate the zombie1234567# A zombie is already dead, so you cannot kill it. You can eliminate the zombie by killing its parent.# First, find PID of the zombieps aux| grep 'Z'# Next find the PID of zombie's parentpstree -p -s &lt;zombie_PID&gt;# Then you can kill its parent and you will notice the zombie is gone.sudo kill 9 &lt;parent_PID&gt; Show memory usage12free -c 10 -mhs 1# print 10 times, at 1 second interval Display CPU and IO statistics for devices and partitions.12# refresh every secondiostat -x -t 1 Display bandwidth usage on an network interface (e.g. enp175s0f0)1iftop -i enp175s0f0 Tell how long the system has been running and number of users1uptime Check if it’s root running1234if [ \"$EUID\" -ne 0 ]; then echo \"Please run this as root\" exit 1fi Change shell of a user (e.g. bonnie)12chsh -s /bin/sh bonnie# /etc/shells: valid login shells Change root / fake root / jail (e.g. change root to newroot)1234chroot /home/newroot /bin/bash# To exit chrootexit Display file status (size; access, modify and change time, etc) of a file (e.g. filename.txt)1stat filename.txt Snapshot of the current processes1ps aux Display a tree of processes1pstree Find maximum number of processes1cat /proc/sys/kernel/pid_max Print or control the kernel ring buffer1dmesg Show IP address1234$ip add show# orifconfig Print previous and current SysV runlevel1234runlevel# orwho -r Change SysV runlevel (e.g. 5)123init 5#ortelinit 5 Display all available services in all runlevels,12chkconfig --list# update-rc.d equivalent to chkconfig in ubuntu Check system version1cat /etc/*-release Linux Programmer’s Manuel: hier- description of the filesystem hierarchy1man hier Control the systemd system and service manager12345# e.g. check the status of cron servicesystemctl status cron.service# e.g. stop cron servicesystemctl stop cron.service List job1jobs -l Run a program with modified priority (e.g. ./test.sh)12345# nice value is adjustable from -20 (most favorable) to +19# the nicer the application, the lower the priority# Default niceness: 10; default priority: 80nice -10 ./test.sh Export PATH1export PATH=$PATH:~/path/you/want Make file executable12chmod +x filename# you can now ./filename to execute it Print system information1234uname -a# Check system hardware-platform (x86-64)uname -i Surf the net1links www.google.com Add user, set passwd12useradd usernamepasswd username Edit variable for bash, (e.g. displaying the whole path)12341. joe ~/.bash_profile2. export PS1='\\u@\\h:\\w\\$'# $PS1 is a variable that defines the makeup and style of the command prompt3. source ~/.bash_profile Edit environment setting (e.g. alias)1231. joe ~/.bash_profile2. alias pd=\"pwd\" //no more need to type that 'w'!3. source ~/.bash_profile Print all alias1alias -p Unalias (e.g. after alias ls=’ls –color=auto’)1unalias ls Set and unset shell options12345678# print all shell optionsshopt# to unset (or stop) aliasshopt -u expand_aliases# to set (or start) aliasshopt -s expand_aliases List environment variables (e.g. PATH)12echo $PATH# list of directories separated by a colon List all environment variables for current user1env Unset environment variable (e.g. unset variable ‘MYVAR’)1unset MYVAR Show partition format1lsblk Inform the OS of partition table changes1partprobe Soft link program to bin12ln -s /path/to/program /home/usr/bin# must be the whole path to the program Show hexadecimal view of data1hexdump -C filename.class Jump to different node1rsh node_name Check port (active internet connection)1netstat -tulpn Print resolved symbolic links or canonical file names1readlink filename Find out the type of command and where it link to (e.g. python)123456789101112type python# python is /usr/bin/python# There are 5 different types, check using the 'type -f' flag# 1. alias (shell alias)# 2. function (shell function, type will also print the function body)# 3. builtin (shell builtin)# 4. file (disk file)# 5. keyword (shell reserved word)# You can also use `which`which python# /usr/bin/python List all functions names1declare -F List total size of a directory1234du -hs .# ordu -sb Copy directory with permission setting1cp -rp /path/to/directory Store current directory1234567pushd .# then poppopd#or use dirs to display the list of currently remembered directories.dirs -l Show disk usage1234567df -h# ordu -h#ordu -sk /var/log/* |sort -rn |head -10 Show all file system type1df -TH Show current runlevel1runlevel Switch runlevel1234init 3#ortelinit 3 Permanently modify runlevel121. edit /etc/init/rc-sysinit.conf2. env DEFAULT_RUNLEVEL=2 Become root1su Become somebody1su somebody Report user quotes on device1repquota -auvs Get entries in a number of important databases123456789getent database_name# (e.g. the 'passwd' database)getent passwd# list all user account (all local and LDAP)# (e.g. fetch list of grop accounts)getent group# store in database 'group' Change owner of file123chown user_name filenamechown -R user_name /path/to/directory/# chown user:group filename Mount and unmount12345# e.g. Mount /dev/sdb to /home/testmount /dev/sdb /home/test# e.g. Unmount /home/testumount /home/test List current mount detail123mount# ordf List current usernames and user-numbers1cat /etc/passwd Get all username1getent passwd| awk '&#123;FS=\"[:]\"; print $1&#125;' Show all users1compgen -u Show all groups1compgen -g Show group of user1group username Show uid, gid, group of user1234id username# variable for UIDecho $UID Check if it’s root12345if [ $(id -u) -ne 0 ];then echo \"You are not root!\" exit;fi# 'id -u' output 0 if it's not root Find out CPU information1234more /proc/cpuinfo# orlscpu Set quota for user (e.g. disk soft limit: 120586240; hard limit: 125829120)1setquota username 120586240 125829120 0 0 /home Show quota for user1quota -v username Display current libraries from the cache1ldconfig -p Print shared library dependencies (e.g. for ‘ls’)1ldd /bin/ls Check user login1lastlog Check last reboot history1last reboot Edit path for all users12joe /etc/environment# edit this file Show and set user limit1ulimit -u Which ports are listening for TCP connections from the network12nmap -sT -O localhost#notice that some companies might not like you using nmap Print out number of cores/ processors1nproc --all Check status of each core121. top2. press '1' Show jobs and PID1jobs -l List all running services1service --status-all Schedule shutdown server1shutdown -r +5 \"Server will restart in 5 minutes. Please save your work.\" Cancel scheduled shutdown1shutdown -c Broadcast to all users1wall -n hihi Kill all process of a user1pkill -U user_name Kill all process of a program1kill -9 $(ps aux | grep 'program_name' | awk '&#123;print $2&#125;') Set gedit preference on server123456789101112131415# You might have to install the following:apt-get install libglib2.0-bin;# oryum install dconf dconf-editor;yum install dbus dbus-x11;# Check listgsettings list-recursively# Change some settingsgsettings set org.gnome.gedit.preferences.editor highlight-current-line truegsettings set org.gnome.gedit.preferences.editor scheme 'cobalt'gsettings set org.gnome.gedit.preferences.editor use-default-font falsegsettings set org.gnome.gedit.preferences.editor editor-font 'Cantarell Regular 12' Add user to a group (e.g add user ‘nice’ to the group ‘docker’, so that he can run docker without sudo)1sudo gpasswd -a nice docker Pip install python package without root121. pip install --user package_name2. You might need to export ~/.local/bin/ to PATH: export PATH=$PATH:~/.local/bin/ Removing old linux kernels (when /boot almost full…)121. uname -a #check current kernel, which should NOT be removed2. sudo apt-get purge linux-image-X.X.X-X-generic #replace old version Change hostname123456789101112sudo hostname your-new-name# if not working, do also:hostnamectl set-hostname your-new-hostname# then check with:hostnamectl# Or check /etc/hostname# If still not working..., edit:/etc/sysconfig/network/etc/sysconfig/network-scripts/ifcfg-ensxxx#add HOSTNAME=\"your-new-hostname\" List installed packages1234apt list --installed# or on Red Hat:yum list installed Check which file make the device busy on umount1lsof /mnt/dir When sound not working12killall pulseaudio# then press Alt-F2 and type in pulseaudio When sound not working1killall pulseaudio List information about SCSI devices1lsscsi Tutorial for setting up your own DNS serverhttp://onceuponmine.blogspot.tw/2017/08/set-up-your-own-dns-server.html Tutorial for creating a simple daemonhttp://onceuponmine.blogspot.tw/2017/07/create-your-first-simple-daemon.html Tutorial for using your gmail to send emailhttp://onceuponmine.blogspot.tw/2017/10/setting-up-msmtprc-and-use-your-gmail.html Using telnet to test open ports, test if you can connect to a port (e.g 53) of a server (e.g 192.168.2.106)1telnet 192.168.2.106 53 Change network maximum transmission unit (mtu) (e.g. change to 9000)1ifconfig eth0 mtu 9000 Get pid of a running process (e.g python)1234pidof python# orps aux|grep python NTP12345# Start ntp:ntpd# Check ntp:ntpq -p Remove unnecessary files to clean your server1234567sudo apt-get autoremovesudo apt-get cleansudo rm -rf ~/.cache/thumbnails/*# Remove old kernal:sudo dpkg --list 'linux-image*'sudo apt-get remove linux-image-OLDER_VERSION Increase/ resize root partition (root partition is an LVM logical volume)123pvscanlvextend -L +130G /dev/rhel/root -r# Adding -r will grow filesystem after resizing the volume. Create a UEFI Bootable USB drive (e.g. /dev/sdc1)1sudo dd if=~/path/to/isofile.iso of=/dev/sdc1 oflag=direct bs=1048576 Locate and remove a package12sudo dpkg -l | grep &lt;package_name&gt;sudo dpkg --purge &lt;package_name&gt; Create a ssh tunnel1234ssh -f -L 9000:targetservername:8088 root@192.168.14.72 -N#-f: run in background; -L: Listen; -N: do nothing#the 9000 of your computer is now connected to the 8088 port of the targetservername through 192.168.14.72#so that you can see the content of targetservername:8088 by entering localhost:9000 from your browser. Get process ID of a process (e.g. sublime_text)1234567891011#pidofpidof sublime_text#pgrep, you don't have to type the whole program namepgrep sublim#pgrep, echo 1 if process found, echo 0 if no such processpgrep -q sublime_text &amp;&amp; echo 1 || echo 0#top, takes longer timetop|grep sublime_text Some benchmarking tools for your serveraio-stress - AIO benchmark.bandwidth - memory bandwidth benchmark.bonnie++ - hard drive and file system performance benchmark.dbench - generate I/O workloads to either a filesystem or to a networked CIFS or NFS server.dnsperf - authorative and recursing DNS servers.filebench - model based file system workload generator.fio - I/O benchmark.fs_mark - synchronous/async file creation benchmark.httperf - measure web server performance.interbench - linux interactivity benchmark.ioblazer - multi-platform storage stack micro-benchmark.iozone - filesystem benchmark.iperf3 - measure TCP/UDP/SCTP performance.kcbench - kernel compile benchmark, compiles a kernel and measures the time it takes.lmbench - Suite of simple, portable benchmarks.netperf - measure network performance, test unidirectional throughput, and end-to-end latency.netpipe - network protocol independent performance evaluator.nfsometer - NFS performance framework.nuttcp - measure network performance.phoronix-test-suite - comprehensive automated testing and benchmarking platform.seeker - portable disk seek benchmark.siege - http load tester and benchmark.sockperf - network benchmarking utility over socket API.spew - measures I/O performance and/or generates I/O load.stress - workload generator for POSIX systems.sysbench - scriptable database and system performance benchmark.tiobench - threaded IO benchmark.unixbench - the original BYTE UNIX benchmark suite, provide a basic indicator of the performance of a Unix-like system.wrk - HTTP benchmark. Show a listing of last logged in users.1lastb Show a listing of current logged in users, print information of them1who Show who is logged on and what they are doing1w Print the user names of users currently logged in to the current host.1users Stop tailing a file on program terminate12tail -f --pid=&lt;PID&gt; filename.txt# replace &lt;PID&gt; with the process ID of the program. List all enabled services1systemctl list-unit-files|grep enabled Hardware[back to top] Collect and summarize all hardware info of your machine12lshw -json &gt;report.json# Other options are: [ -html ] [ -short ] [ -xml ] [ -json ] [ -businfo ] [ -sanitize ] ,etc Finding Out memory device detail1sudo dmidecode -t memory Print detail of CPU hardware1234567891011121314151617181920212223242526272829303132333435363738dmidecode -t 4# Type Information# 0 BIOS# 1 System# 2 Base Board# 3 Chassis# 4 Processor# 5 Memory Controller# 6 Memory Module# 7 Cache# 8 Port Connector# 9 System Slots# 11 OEM Strings# 13 BIOS Language# 15 System Event Log# 16 Physical Memory Array# 17 Memory Device# 18 32-bit Memory Error# 19 Memory Array Mapped Address# 20 Memory Device Mapped Address# 21 Built-in Pointing Device# 22 Portable Battery# 23 System Reset# 24 Hardware Security# 25 System Power Controls# 26 Voltage Probe# 27 Cooling Device# 28 Temperature Probe# 29 Electrical Current Probe# 30 Out-of-band Remote Access# 31 Boot Integrity Services# 32 System Boot# 34 Management Device# 35 Management Device Component# 36 Management Device Threshold Data# 37 Memory Channel# 38 IPMI Device# 39 Power Supply Count the number of Segate hard disks123lsscsi|grep SEAGATE|wc -l# orsg_map -i -x|grep SEAGATE|wc -l Get UUID of a disk (e.g. sdb)1blkid /dev/sdb Generate an UUID1uuidgen Print detail of all hard disks12lsblk -io KNAME,TYPE,MODEL,VENDOR,SIZE,ROTA#where ROTA means rotational device / spinning hard disks (1 if true, 0 if false) List all PCI (Peripheral Component Interconnect) devices123lspci# List information about NIClspci | egrep -i --color 'network|ethernet' List all USB devices1lsusb Linux modules123456789101112# Show the status of modules in the Linux Kernellsmod# Add and remove modules from the Linux Kernelmodprobe# or# Remove a modulermmod# Insert a moduleinsmod Controlling IPMI-enabled devices (e.g. BMC)12345678910111213141516171819202122# Remotely finding out power status of the serveripmitool -U &lt;bmc_username&gt; -P &lt;bmc_password&gt; -I lanplus -H &lt;bmc_ip_address&gt; power status# Remotely switching on serveripmitool -U &lt;bmc_username&gt; -P &lt;bmc_password&gt; -I lanplus -H &lt;bmc_ip_address&gt; power on# Turn on panel identify light (default 15s)ipmitool chassis identify 255# Found out server sensor temperatureipmitool sensors |grep -i Temp# Reset BMCipmitool bmc reset cold# Prnt BMC networkipmitool lan print 1# Setting BMC networkipmitool -I bmc lan set 1 ipaddr 192.168.0.55ipmitool -I bmc lan set 1 netmask 255.255.255.0ipmitool -I bmc lan set 1 defgw ipaddr 192.168.0.1 Networking[back to top] Resolve a domain to an IP address in a Bash script?1dig +short www.example.com Show the SSL certificate of a domain1openssl s_client -showcerts -connect www.example.com:443 Display IP address1ip a Display route table1ip r Display ARP cache (ARP cache displays the MAC addresses of device in the same network that you have connected to)1ip n Add transient IP addres (reset after reboot) (e.g. add 192.168.140.3/24 to device eno16777736)1ip address add 192.168.140.3/24 dev eno16777736 Persisting network configuration changes12sudo vi /etc/sysconfig/network-scripts/ifcfg-enoxxx# then edit the fields: BOOTPROT, DEVICE, IPADDR, NETMASK, GATEWAY, DNS1 etc Refresh NetworkManager1sudo nmcli c reload Restart all interfaces1sudo systemctl restart network.service To view hostname, OS, kernal, architecture at the same time!1hostnamectl Set hostname (set all transient, static, pretty hostname at once)1hostnamectl set-hostname \"mynode\" Find out the web server (e.g Nginx or Apache) of a website123456789101112curl -I http://example.com/# HTTP/1.1 200 OK# Server: nginx# Date: Thu, 02 Jan 2020 07:01:07 GMT# Content-Type: text/html# Content-Length: 1119# Connection: keep-alive# Vary: Accept-Encoding# Last-Modified: Mon, 09 Sep 2019 10:37:49 GMT# ETag: \"xxxxxx\"# Accept-Ranges: bytes# Vary: Accept-Encoding Data wrangling[back to top] Print some words that start with a particular string (e.g. words start with ‘phy’)123456789101112# If file is not specified, the file /usr/share/dict/words is used.look phy|head -n 10# Phil# Philadelphia# Philadelphia's# Philby# Philby's# Philip# Philippe# Philippe's# Philippians# Philippine Repeat printing string n times (e.g. print ‘hello world’ five times)1printf 'hello world\\n%.0s' &#123;1..5&#125; Do not echo the trailing newline1username=`echo -n \"bashoneliner\"` Copy a file to multiple files (e.g copy fileA to file(B-D))1tee &lt;fileA fileB fileC fileD &gt;/dev/null Remove newline / nextline1tr --delete '\\n' &lt;input.txt &gt;output.txt Replace newline1tr '\\n' ' ' &lt;filename To uppercase/lowercase1tr /a-z/ /A-Z/ Translate a range of characters (e.g. substitute a-z into a)12echo 'something' |tr a-z a# aaaaaaaaa Compare two files (e.g. fileA, fileB)123456diff fileA fileB# a: added; d:delete; c:changed# orsdiff fileA fileB# side-to-side merge of file differences Compare two files, strip trailing carriage return/ nextline (e.g. fileA, fileB)1diff fileA fileB --strip-trailing-cr Number a file (e.g. fileA)123456789nl fileA#ornl -nrz fileA# add leading zeros#ornl -w1 -s ' '# making it simple, blank separate Join two files field by field with tab (default join by the first column of both file, and default separator is space)12345# fileA and fileB should have the same ordering of lines.join -t '\\t' fileA fileB# Join using specified field (e.g. column 3 of fileA and column 5 of fileB)join -1 3 -2 5 fileA fileB Combine/ paste two or more files into columns (e.g. fileA, fileB, fileC)12paste fileA fileB fileC# default tab separate Group/combine rows into one row12345678910# e.g.# AAAA# BBBB# CCCC# DDDDcat filename|paste - -# AAAABBBB# CCCCDDDDcat filename|paste - - - -# AAAABBBBCCCCDDDD Fastq to fasta (fastq and fasta are common file formats for bioinformatics sequence data)1cat file.fastq | paste - - - - | sed 's/^@/&gt;/g'| cut -f1-2 | tr '\\t' '\\n' &gt;file.fa Reverse string1echo 12345| rev Generate sequence 1-101seq 10 Find average of input list/file of integers1i=`wc -l filename|cut -d ' ' -f1`; cat filename| echo \"scale=2;(`paste -sd+`)/\"$i|bc Generate all combination (e.g. 1,2)12echo &#123;1,2&#125;&#123;1,2&#125;# 1 1, 1 2, 2 1, 2 2 Generate all combination (e.g. A,T,C,G)12345set = &#123;A,T,C,G&#125;group= 5for ((i=0; i&lt;$group; i++));do repetition=$set$repetition;done bash -c \"echo \"$repetition\"\" Read file content to variable1foo=$(&lt;test1) Echo size of variable1echo $&#123;#foo&#125; Echo a tab1echo -e ' \\t ' Split file into smaller file12345# Split by line (e.g. 1000 lines/smallfile)split -d -l 1000 largefile.txt# Split by byte without breaking lines across filessplit -C 10 largefile.txt Create a large amount of dummy files (e.g 100000 files, 10 bytes each):12345#1. Create a big filedd if=/dev/zero of=bigfile bs=1 count=1000000#2. Split the big file to 100000 10-bytes files split -b 10 -a 10 bigfile Rename all files (e.g. remove ABC from all .gz files)1rename 's/ABC//' *.gz Remove file extension (e.g remove .gz from filename.gz)123basename filename.gz .gzzcat filename.gz&gt; $(basename filename.gz .gz).unpacked Add file extension to all file(e.g add .txt)12345rename s/$/.txt/ *# You can use rename -n s/$/.txt/ * to check the result first, it will only print sth like this:# rename(a, a.txt)# rename(b, b.txt)# rename(c, c.txt) Squeeze repeat patterns (e.g. /t/t –&gt; /t)1tr -s \"/t\" &lt; filename Do not print nextline with echo1echo -e 'text here \\c' View first 50 characters of file1head -c 50 file Cut and get last column of a file1cat file|rev | cut -d/ -f1 | rev Add one to variable/increment/ i++ a numeric variable (e.g. $var)123((var++))# orvar=$((var+1)) Cut the last column1cat filename|rev|cut -f1|rev Cat to a file1234cat &gt;myfilelet me add sth hereexit by control + c^C Clear the contents of a file (e.g. filename)1&gt;filename Append to file (e.g. hihi)1echo 'hihi' &gt;&gt;filename Working with json data1234#install the useful jq package#sudo apt-get install jq#e.g. to get all the values of the 'url' key, simply pipe the json to the following jq command(you can use .[]. to select inner json, i.e jq '.[].url')cat file.json | jq '.url' Decimal to Binary (e.g get binary of 5)12345D2B=(&#123;0..1&#125;&#123;0..1&#125;&#123;0..1&#125;&#123;0..1&#125;&#123;0..1&#125;&#123;0..1&#125;&#123;0..1&#125;&#123;0..1&#125;)echo -e $&#123;D2B[5]&#125;#00000101echo -e $&#123;D2B[255]&#125;#11111111 Wrap each input line to fit in specified width (e.g 4 integers per line)123456echo \"00110010101110001101\" | fold -w4# 0011# 0010# 1011# 1000# 1101 Sort a file by column and keep the original order1sort -k3,3 -s Right align a column (right align the 2nd column)1cat file.txt|rev|column -t|rev To both view and store the output12echo 'hihihihi' | tee outputfile.txt# use '-a' with tee to append to file. Show non-printing (Ctrl) characters with cat1cat -v filename Convert tab to space1expand filename Convert space to tab1unexpand filename Display file in octal ( you can also use od to display hexadecimal, decimal, etc)1od filename Reverse cat a file1tac filename Reverse the result from uniq -c1while read a b; do yes $b |head -n $a ;done &lt;test.txt Others[back to top] Describe the format and characteristics of image files.12identify myimage.png#myimage.png PNG 1049x747 1049x747+0+0 8-bit sRGB 1.006MB 0.000u 0:00.000 Bash auto-complete (e.g. show options “now tomorrow never” when you press’tab’ after typing “dothis”)More examples 1234complete -W \"now tomorrow never\" dothis# ~$ dothis # never now tomorrow# press 'tab' again to auto-complete after typing 'n' or 't' Displays a calendar123456789101112# print the current month, today will be highlighted.cal# October 2019 # Su Mo Tu We Th Fr Sa # 1 2 3 4 5 # 6 7 8 9 10 11 12 # 13 14 15 16 17 18 19 # 20 21 22 23 24 25 26 # 27 28 29 30 31 # only display Novembercal -m 11 Forces applications to use the default language for output1234export LC_ALL=C# to revert:unset LC_ALL Encode strings as Base64 strings12echo test|base64#dGVzdAo= Get parent directory of current directory1dirname `pwd` Read .gz file without extracting1234zmore filename# orzless filename Run command in background, output error file1234567891011121314some_commands &amp;&gt;log &amp;# orsome_commands 2&gt;log &amp;# orsome_commands 2&gt;&amp;1| tee logfile# orsome_commands |&amp; tee logfile# orsome_commands 2&gt;&amp;1 &gt;&gt;outfile#0: standard input; 1: standard output; 2: standard error Run multiple commands in background12345# run sequentially(sleep 2; sleep 3) &amp;# run parallellysleep 2 &amp; sleep 3 &amp; Run process even when logout (immune to hangups, with output to a non-tty)12# e.g. Run myscript.sh even when log out.nohup bash myscript.sh Send mail12echo 'heres the content'| mail -a /path/to/attach_file.txt -s 'mail.subject' me@gmail.com# use -a flag to set send from (-a \"From: some@mail.tld\") Convert .xls to csv1xls2csv filename Make BEEP sound1speaker-test -t sine -f 1000 -l1 Set beep duration1(speaker-test -t sine -f 1000) &amp; pid=$!;sleep 0.1s;kill -9 $pid Editing your history123456history -wvi ~/.bash_historyhistory -r#orhistory -d [line_number] Interacting with history12# list 5 previous command (similar to `history |tail -n 5` but wont print the history command itself)fc -l -5 Delete current bash command12345678Ctrl+U# orCtrl+C# orAlt+Shift+## to make it to history Add something to history (e.g. “addmetohistory”)12# addmetodistory# just add a \"#\" before~~ Get last history/record filename1head !$ Clean screen12clear# or simply Ctrl+l Backup with rsync1234567rsync -av filename filename.bakrsync -av directory directory.bakrsync -av --ignore_existing directory/ directory.bakrsync -av --update directory directory.bakrsync -av directory user@ip_address:/path/to/directory.bak# skip files that are newer on receiver (i prefer this one!) Make all directories at one time!123mkdir -p project/&#123;lib/ext,bin,src,doc/&#123;html,info,pdf&#125;,demo/stat&#125;# -p: make parent directory# this will create project/doc/html/; project/doc/info; project/lib/ext ,etc Run command only if another command returns zero exit status (well done)1cd tmp/ &amp;&amp; tar xvf ~/a.tar Run command only if another command returns non-zero exit status (not finish)1cd tmp/a/b/c ||mkdir -p tmp/a/b/c Use backslash “&quot; to break long command123cd tmp/a/b/c \\&gt; || \\&gt;mkdir -p tmp/a/b/c List file type of file (e.g. /tmp/)12file /tmp/# tmp/: directory Writing Bash script (‘#!’’ is called shebang )123#!/bin/bashfile=$&#123;1#*.&#125;# remove string before a \".\" Python simple HTTP Server123python -m SimpleHTTPServer# or when using python3:python3 -m http.server Read user input12read inputecho $input Array1234567declare -a array=()# ordeclare array=()# or associative arraydeclare -A array=() Send a directory1scp -r directoryname user@ip:/path/to/send Fork bomb1234# Don't try this at home!# It is a function that calls itself twice every call until you run out of system resources.# A '# ' is added in front for safety reason, remove it when seriously you are testing it.# :()&#123;:|:&amp;&#125;;: Use the last argument1!$ Check last exit code1echo $? Extract .xf123unxz filename.tar.xz# thentar -xf filename.tar Unzip tar.bz2 file (e.g. file.tar.bz2)1tar xvfj file.tar.bz2 Unzip tar.xz file (e.g. file.tar.xz)12unxz file.tar.xztar xopf file.tar Extract to a path1tar xvf -C /path/to/directory filename.gz Output a y/n repeatedly until killed123456789101112# 'y':yes# or 'n':yes n# or 'anything':yes anything# For example:```bashyes | rm -r large_directory Create large dummy file of certain size instantly (e.g. 10GiB)1fallocate -l 10G 10Gigfile Create dummy file of certain size (e.g. 200mb)12345678dd if=/dev/zero of=//dev/shm/200m bs=1024k count=200# ordd if=/dev/zero of=//dev/shm/200m bs=1M count=200# Standard output:# 200+0 records in# 200+0 records out# 209715200 bytes (210 MB) copied, 0.0955679 s, 2.2 GB/s Keep /repeatedly executing the same command (e.g Repeat ‘wc -l filename’ every 1 second)1watch -n 1 wc -l filename Print commands and their arguments when execute (e.g. echo expr 10 + 20)1set -x; echo `expr 10 + 20 ` Print some meaningful sentences to you (install fortune first)1fortune Colorful (and useful) version of top (install htop first)1htop Press any key to continue1read -rsp $'Press any key to continue...\\n' -n1 key Run sql-like command on files from terminal1234# download:# https://github.com/harelba/q# example:q -d \",\" \"select c3,c4,c5 from /path/to/file.txt where c3='foo' and c5='boo'\" Using Screen for multiple terminal sessions12345678910111213141516171819202122232425262728293031# Create session and attach:screen# Create detached session foo:screen -S foo -d -m# Detached session foo:screen: ^a^d# List sessions:screen -ls# Attach last session:screen -r# Attach to session foo:screen -r foo# Kill session foo:screen -r foo -X quit# Scroll:Hit your screen prefix combination (C-a / control+A), then hit Escape.Move up/down with the arrow keys (↑ and ↓).# Redirect output of an already running process in Screen: (C-a / control+A), then hit 'H'# Store screen output for Screen:Ctrl+A, Shift+H# You will then find a screen.log file under current directory. Using Tmux for multiple terminal sessions123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# Create session and attach:tmux# Attach to session foo:tmux attach -t foo# Detached session foo:^bd# List sessions:tmux ls# Attach last session:tmux attach# Kill session foo:tmux kill-session -t foo# Create detached session foo:tmux new -s foo -d# Send command to all panes in tmux:Ctrl-B:setw synchronize-panes# Some tmux pane control commands:Ctrl-B# Panes (splits), Press Ctrl+B, then input the following symbol:# % horizontal split# \" vertical split# o swap panes# q show pane numbers# x kill pane# space - toggle between layouts# Distribute Vertically (rows):select-layout even-vertical# orCtrl+b, Alt+2# Distribute horizontally (columns):select-layout even-horizontal# orCtrl+b, Alt+1# ScrollCtrl-b then \\[ then you can use your normal navigation keys to scroll around.Press q to quit scroll mode. Pass password to ssh1sshpass -p mypassword ssh root@10.102.14.88 \"df -h\" Wait for a pid (job) to complete12345wait %1# orwait $PIDwait $&#123;!&#125;#wait $&#123;!&#125; to wait till the last background process ($! is the PID of the last background process) Convert pdf to txt12sudo apt-get install poppler-utilspdftotext example.pdf example.txt List only directory1ls -ld -- */ Capture/record/save terminal output (capture everything you type and output)123script output.txt# start using terminal# to logout the screen session (stop saving the contents), type exit. List contents of directories in a tree-like format.12345678910111213141516tree# go to the directory you want to list, and type tree (sudo apt-get install tree)# output:# home/# └── project# ├── 1# ├── 2# ├── 3# ├── 4# └── 5## set level directories deep (e.g. level 1)tree -L 1# home/# └── project Set up virtualenv(sandbox) for python12345678910# 1. install virtualenv.sudo apt-get install virtualenv# 2. Create a directory (name it .venv or whatever name your want) for your new shiny isolated environment.virtualenv .venv# 3. source virtual binsource .venv/bin/activate# 4. you can check check if you are now inside a sandbox.type pip# 5. Now you can install your pip package, here requirements.txt is simply a txt file containing all the packages you want. (e.g tornado==4.5.3).pip install -r requirements.txt More coming!!","categories":[{"name":"Linux","slug":"Linux","permalink":"https://djkloop.github.io/categories/Linux/"},{"name":"Terminal","slug":"Linux/Terminal","permalink":"https://djkloop.github.io/categories/Linux/Terminal/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://djkloop.github.io/tags/Linux/"},{"name":"Terminal","slug":"Terminal","permalink":"https://djkloop.github.io/tags/Terminal/"}],"author":"djkloop"},{"title":"Rust学习笔记4","slug":"Rust-4","date":"2020-06-09T17:23:44.000Z","updated":"2020-06-09T17:23:44.000Z","comments":true,"path":"2020/06/10/Rust-4/","link":"","permalink":"https://djkloop.github.io/2020/06/10/Rust-4/","excerpt":"","text":"万丈高楼，HelloWorld起… 前言学习Rust, Slice Slice12345678910111213141516171819202122232425fn main() &#123; let s = String::from(\"Hello World\"); let _h = &amp;s[0..5]; let _h = &amp;s[0..=4]; let _h = &amp;s[..=4]; let h = &amp;s[..5]; println!(\"h = &#123;&#125;\", h); let _w = &amp;s[6..]; let _w = &amp;s[6..=10]; let _w = &amp;s[6..]; let w = &amp;s[..]; println!(\"w = &#123;&#125;\", w); // let ss = String::from(\"你好\"); // let w1 = &amp;ss[0..1]; // println!(\"w1 = &#123;&#125;\", w1); let arr = [1, 2, 3, 4]; let s = &amp;arr[1..3]; println!(\"s = &#123;&#125;\", s[0]); println!(\"s = &#123;&#125;\", s[1]); println!(\"len = &#123;&#125;\", s.len());&#125;","categories":[{"name":"Rust","slug":"Rust","permalink":"https://djkloop.github.io/categories/Rust/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://djkloop.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"author":"djkloop"},{"title":"Rust学习笔记1","slug":"Rust-01","date":"2020-05-24T04:37:51.000Z","updated":"2020-05-24T05:23:43.000Z","comments":true,"path":"2020/05/24/Rust-01/","link":"","permalink":"https://djkloop.github.io/2020/05/24/Rust-01/","excerpt":"","text":"万丈高楼，HelloWorld起… 前言Rust 语言是一种高效、可靠的通用高级语言。其高效不仅限于开发效率，它的执行效率也是令人称赞的，是一种少有的兼顾开发效率和执行效率的语言。 这个系列是跟着b站的up主令狐冲的视频一路跟下去的…如果有想学习的可以点击下面的链接b站地址 安装官网地址 12345678# 安装（官方）curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh # 安装是否成功rustc --version# 控制台显示以下内容就算安装成功# rustc 1.42.0 (b8cedc004 2020-03-09) 注意事项，国内是需要梯子的，这里可以配置国内的清华大学的源（参考下面的文章或者百度谷歌一下） https://lug.ustc.edu.cn/wiki/mirrors/help/rust-crates 编程环境和软件 我个人使用的是 macos + vscode， 其它的我没有试过但是应该都大同小异。 HelloWorld1carogo new HelloWorld 123fn main() &#123; print!(\"Hello World!\")&#125; 然后在vscode里面右键运行Run Code就能看到结果了","categories":[{"name":"Rust","slug":"Rust","permalink":"https://djkloop.github.io/categories/Rust/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://djkloop.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"author":"djkloop"},{"title":"Rust学习笔记3","slug":"Rust-3","date":"2020-05-23T18:54:48.000Z","updated":"2020-06-09T17:14:03.000Z","comments":true,"path":"2020/05/24/Rust-3/","link":"","permalink":"https://djkloop.github.io/2020/05/24/Rust-3/","excerpt":"","text":"万丈高楼，HelloWorld起… 前言 https://kaisery.github.io/trpl-zh-cn/ch04-00-understanding-ownership.html 所有权（系统）是 Rust 最为与众不同的特性，它让 Rust 无需垃圾回收（garbage collector）即可保障内存安全。因此，理解 Rust 中所有权如何工作是十分重要的。本章，我们将讲到所有权以及相关功能：借用、slice 以及 Rust 如何在内存中布局数据。 1234567891011121314151617181920212223242526272829303132333435363738394041424344// 1. rust通过所有权机制来管理内存，编译器在编译就会根据所有权规则对内存的使用进行检测// 2. 堆和栈// 2.1 在编译时栈中的所有数据都必须占用已知且固定的大小// 2.2 在编译时大小未知或大小可能变化的数据，要改为存储在堆上// 3. 作用域// 4. String内存回收// 5. 移动// 6. clone// 7. 栈上数据拷贝// 8. 函数和作用域fn main() &#123; let x: i32 = 1; &#123; let y: i32 = 1; println!(\"y = &#123;&#125;\", y); println!(\"x - x = &#123;&#125;\", x); &#125; &#123; let mut s1 = String::from(\"Hello\"); s1.push_str(\" World\"); println!(\"s1 = &#123;&#125;\", s1); // String类型离开作用域时，会调用drop方法 // 移动 let s2 = String::from(\"test\"); // let s3 = s2 会报错，s2离开的时候内存会被释放掉，所以不能这样直接赋值，也就是不能再使用s2 // 这里可以使用深拷贝来解决s2不能使用的问题 let s3 = s2.clone(); println!(\"s2 = &#123;&#125;\", s2); println!(\"s2 = &#123;&#125;\", s3); &#125; // copy 栈上的数据拷贝，就是拷贝的数据。 let a = 1; let b = a; println!(\"a = &#123;&#125;, b = &#123;&#125;\", a, b); // 常用的copy trait有 // 所有的整型 // 浮点型 // 布尔值 // 字符类型 char // 元组&#125;","categories":[{"name":"Rust","slug":"Rust","permalink":"https://djkloop.github.io/categories/Rust/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://djkloop.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"author":"djkloop"},{"title":"Rust学习笔记2","slug":"Rust-2","date":"2020-05-23T17:24:42.000Z","updated":"2020-05-24T06:54:46.000Z","comments":true,"path":"2020/05/24/Rust-2/","link":"","permalink":"https://djkloop.github.io/2020/05/24/Rust-2/","excerpt":"","text":"万丈高楼，HelloWorld起… 前言上一篇讲完了Rust的一些概念和安装还有HelloWorld，这一篇跟着视频里面学习变量等相关的代码。 变量12345678910111213141516171819202122const MAX_POIONT: u32 = 10000;fn main() &#123; // 1. 变量定义 // 定义变量用let，如果变量没有使用mut，那么变量是不可变的。 let a = 1; println!(\"a = &#123;&#125;\", a); let mut b: u32 = 2; println!(\"b1 = &#123;&#125;\", b); b = 4; println!(\"b2 = &#123;&#125;\", b); // 2. 隐藏性 // 这个变量可以重复定义...真他娘的是个神奇的语言 // 如果后面继续有使用这个变量的话，会使用这一行的变量， // 有点覆盖的意思... let b: f32 = 1.1; println!(\"b = &#123;&#125;\", b); // 3. 常量 println!(\"MAX_POINT = &#123;&#125;\", MAX_POIONT);&#125; 数据类型12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758fn main() &#123; // bool let is_true: bool = true; println!(\"is_true = &#123;&#125;\", is_true); let is_false: bool = false; println!(\"is_false = &#123;&#125;\", is_false); // rust自带类型推导 let is_bool = true; println!(\"is_bool = &#123;&#125;\", is_bool); // char 在rust里面，char是32位的 let char_a = \"a\"; println!(\"char_a = &#123;&#125;\", char_a); let char_b = \"你\"; println!(\"char_b = &#123;&#125;\", char_b); // i8, i16, 132, i64, u8, u16, u32, u64, f32, f64 let i8_c: i8 = -111; println!(\"i8_c = &#123;&#125;\", i8_c); let f32_d = 0.00000008; println!(\"f32_b = &#123;&#125;\", f32_d); // 自适应类型 isize, usize println!(\"max = &#123;&#125;\", usize::max_value()); // 数组 [Type; size] let arr: [u32; 5] = [1, 2, 3, 4, 5]; println!(\"arr[0] = &#123;&#125;\", arr[0]); let arr1: [u32; 3] = [1, 2, 3]; show(arr1); // 元组 let tup: (i32, f32, char) = (-3, 3.2, '你'); println!(\"&#123;&#125;\", tup.0); // 自带类型推导 let tup = (-3, 3.2, '你'); println!(\"------------------\"); println!(\"&#123;&#125;\", tup.0); println!(\"&#123;&#125;\", tup.1); println!(\"&#123;&#125;\", tup.2); println!(\"------------------\"); // 有点类似js的解构赋值 let (x, y, z) = tup; println!(\"------------------\"); println!(\"&#123;&#125;\", x); println!(\"&#123;&#125;\", y); println!(\"&#123;&#125;\", z); println!(\"------------------\");&#125;fn show(arr1: [u32; 3]) &#123; println!(\"------------------\"); for i in &amp;arr1 &#123; println!(\"&#123;&#125;\", i); &#125; println!(\"------------------\");&#125; 函数12345678910111213141516171819202122232425262728293031323334353637383940414243444546// 不传参数fn other_fun() &#123; println!(\"This is a function\");&#125;// 传参数(参数必须要带类型)fn other_fun1(a: i32, b: u32) &#123; println!(\"a = &#123;&#125;, b = &#123;&#125;\", a, b);&#125;// 返回带类型的fn other_fun2(a: i32, b: i32) -&gt; i32 &#123; let result = a + b; return result;&#125;// 返回带类型的 可以不写return但是不能写冒号fn other_fun3(a: i32, b: i32) -&gt; i32 &#123; // let result = a + b; // result 这样也可以哦~ a + b&#125;fn main() &#123; // other_fun(); // let a = -1; let b = 2; other_fun1(a, b); // let c = 9; let r = other_fun2(a, c); println!(\"r1 = &#123;&#125;\", r); // let r = other_fun3(a, c); println!(\"r2 = &#123;&#125;\", r); // let y = 1; // 语句， 没有返回值 let y = &#123; let x = 1; x + 1 &#125;; println!(\"y = &#123;&#125;\", y); println!(\"Hello, world!\");&#125; 注释123fn main() &#123; // 双斜杠&#125; 控制流123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263fn main() &#123; // if let y = 0; if y == 1 &#123; println!(\"y = 1\"); &#125; // if - else if y == 1 &#123; println!(\"y = 1\") &#125; else &#123; println!(\"y != 1\") &#125; // if - else - if - else if y == 1 &#123; println!(\"y = 1\") &#125; else if y == 0 &#123; println!(\"y == 0\") &#125; else if y == 3 &#123; println!(\"y == 3\") &#125; else &#123; println!(\"other\") &#125; let condition = true; // if - else 里面的所有类型都应该一致 // let x = if condition &#123; 5 &#125; else &#123; \"6\" &#125;; error let x = if condition &#123; 5 &#125; else &#123; 6 &#125;; println!(\"x = &#123;&#125;\", x); // loop let mut counter = 0; loop &#123; println!(\"in loop\"); if counter == 3 &#123; break; &#125;; counter += 1; &#125; let result = loop &#123; counter += 1; if counter == 6 &#123; break counter * 3; &#125; &#125;; println!(\"result = &#123;&#125;\", result); // while let mut i = 0; while i != 10 &#123; i += 1; &#125; println!(\"i = &#123;&#125;\", i); // for let arr = [1, 2, 3, 4]; // for i in arr.iter() &#123; for i in &amp;arr &#123; println!(\"element = &#123;&#125;\", i); &#125;&#125;","categories":[{"name":"Rust","slug":"Rust","permalink":"https://djkloop.github.io/categories/Rust/"}],"tags":[{"name":"编程语言","slug":"编程语言","permalink":"https://djkloop.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"author":"djkloop"},{"title":"Hello World","slug":"hello-world","date":"2020-05-18T04:06:00.000Z","updated":"2020-05-21T04:01:44.000Z","comments":true,"path":"2020/05/18/hello-world/","link":"","permalink":"https://djkloop.github.io/2020/05/18/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate 你说的太对了... More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Test","slug":"Test","permalink":"https://djkloop.github.io/categories/Test/"}],"tags":[{"name":"test","slug":"test","permalink":"https://djkloop.github.io/tags/test/"}],"author":"djkloop"}],"categories":[{"name":"生活","slug":"生活","permalink":"https://djkloop.github.io/categories/%E7%94%9F%E6%B4%BB/"},{"name":"前端开发","slug":"前端开发","permalink":"https://djkloop.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"自媒体","slug":"自媒体","permalink":"https://djkloop.github.io/categories/%E8%87%AA%E5%AA%92%E4%BD%93/"},{"name":"生活","slug":"自媒体/生活","permalink":"https://djkloop.github.io/categories/%E8%87%AA%E5%AA%92%E4%BD%93/%E7%94%9F%E6%B4%BB/"},{"name":"副业","slug":"自媒体/生活/副业","permalink":"https://djkloop.github.io/categories/%E8%87%AA%E5%AA%92%E4%BD%93/%E7%94%9F%E6%B4%BB/%E5%89%AF%E4%B8%9A/"},{"name":"Financial","slug":"Financial","permalink":"https://djkloop.github.io/categories/Financial/"},{"name":"Golang","slug":"Golang","permalink":"https://djkloop.github.io/categories/Golang/"},{"name":"Linux","slug":"Linux","permalink":"https://djkloop.github.io/categories/Linux/"},{"name":"Terminal","slug":"Linux/Terminal","permalink":"https://djkloop.github.io/categories/Linux/Terminal/"},{"name":"Rust","slug":"Rust","permalink":"https://djkloop.github.io/categories/Rust/"},{"name":"Test","slug":"Test","permalink":"https://djkloop.github.io/categories/Test/"}],"tags":[{"name":"杂文","slug":"杂文","permalink":"https://djkloop.github.io/tags/%E6%9D%82%E6%96%87/"},{"name":"Vue","slug":"Vue","permalink":"https://djkloop.github.io/tags/Vue/"},{"name":"Typescript","slug":"Typescript","permalink":"https://djkloop.github.io/tags/Typescript/"},{"name":"副业","slug":"副业","permalink":"https://djkloop.github.io/tags/%E5%89%AF%E4%B8%9A/"},{"name":"自媒体","slug":"自媒体","permalink":"https://djkloop.github.io/tags/%E8%87%AA%E5%AA%92%E4%BD%93/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://djkloop.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Financial","slug":"Financial","permalink":"https://djkloop.github.io/tags/Financial/"},{"name":"生活","slug":"生活","permalink":"https://djkloop.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"理财","slug":"理财","permalink":"https://djkloop.github.io/tags/%E7%90%86%E8%B4%A2/"},{"name":"编程语言","slug":"编程语言","permalink":"https://djkloop.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Linux","slug":"Linux","permalink":"https://djkloop.github.io/tags/Linux/"},{"name":"Terminal","slug":"Terminal","permalink":"https://djkloop.github.io/tags/Terminal/"},{"name":"test","slug":"test","permalink":"https://djkloop.github.io/tags/test/"}]}